
7_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000678  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "utils.h"
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	
	// port a as an output led
	SETBIT(DDRD,5);
  76:	81 b3       	in	r24, 0x11	; 17
  78:	80 62       	ori	r24, 0x20	; 32
  7a:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,6);
  7c:	81 b3       	in	r24, 0x11	; 17
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,7);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 68       	ori	r24, 0x80	; 128
  86:	81 bb       	out	0x11, r24	; 17
	// port a as an output led
	SETBIT(DDRD,4);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	81 bb       	out	0x11, r24	; 17
	
	// port c as an input
	CLEARBIT(DDRD,0);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	81 bb       	out	0x11, r24	; 17
	CLEARBIT(DDRD,1); 
  94:	81 b3       	in	r24, 0x11	; 17
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	81 bb       	out	0x11, r24	; 17
	SETBIT(PORTD,0);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	82 bb       	out	0x12, r24	; 18
	SETBIT(PORTD,1);
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	82 bb       	out	0x12, r24	; 18
	volatile unsigned count = 5;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9a 83       	std	Y+2, r25	; 0x02
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	1a c0       	rjmp	.+52     	; 0xe4 <main+0x78>
	while (1)
	{
		//turn on led
		while (count <=7 && READBIT(PIND,0)==1){
			SETBIT(PORTD,count);
  b0:	22 b3       	in	r18, 0x12	; 18
  b2:	49 81       	ldd	r20, Y+1	; 0x01
  b4:	5a 81       	ldd	r21, Y+2	; 0x02
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	4a 95       	dec	r20
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	82 2b       	or	r24, r18
  c6:	82 bb       	out	0x12, r24	; 18
			count++;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	83 ec       	ldi	r24, 0xC3	; 195
  d6:	99 e0       	ldi	r25, 0x09	; 9
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
	SETBIT(PORTD,1);
	volatile unsigned count = 5;
	while (1)
	{
		//turn on led
		while (count <=7 && READBIT(PIND,0)==1){
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	9a 81       	ldd	r25, Y+2	; 0x02
  e8:	08 97       	sbiw	r24, 0x08	; 8
  ea:	10 f4       	brcc	.+4      	; 0xf0 <main+0x84>
  ec:	80 99       	sbic	0x10, 0	; 16
  ee:	e0 cf       	rjmp	.-64     	; 0xb0 <main+0x44>
			SETBIT(PORTD,count);
			count++;
			_delay_ms(400);
		}
		count--;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	9a 83       	std	Y+2, r25	; 0x02
  f8:	89 83       	std	Y+1, r24	; 0x01
		//turn off led
		while(count >=5 && READBIT(PIND,0)==1){
  fa:	1b c0       	rjmp	.+54     	; 0x132 <main+0xc6>
			CLEARBIT(PORTD,count); 
  fc:	22 b3       	in	r18, 0x12	; 18
  fe:	49 81       	ldd	r20, Y+1	; 0x01
 100:	5a 81       	ldd	r21, Y+2	; 0x02
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	4a 95       	dec	r20
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x9c>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	82 bb       	out	0x12, r24	; 18
			count--;
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	9a 83       	std	Y+2, r25	; 0x02
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xba>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xc4>
 130:	00 00       	nop
			count++;
			_delay_ms(400);
		}
		count--;
		//turn off led
		while(count >=5 && READBIT(PIND,0)==1){
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	05 97       	sbiw	r24, 0x05	; 5
 138:	10 f0       	brcs	.+4      	; 0x13e <main+0xd2>
 13a:	80 99       	sbic	0x10, 0	; 16
 13c:	df cf       	rjmp	.-66     	; 0xfc <main+0x90>
			CLEARBIT(PORTD,count); 
			count--;
			_delay_ms(400);
		}
		count++;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
		//alarm
		while (READBIT(PIND,1)==1){
 148:	0f c0       	rjmp	.+30     	; 0x168 <main+0xfc>
			SETBIT(PORTD,4);
 14a:	82 b3       	in	r24, 0x12	; 18
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	82 bb       	out	0x12, r24	; 18
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	83 ed       	ldi	r24, 0xD3	; 211
 154:	90 e3       	ldi	r25, 0x30	; 48
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0xea>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xf4>
 160:	00 00       	nop
			_delay_ms(2000);
			CLEARBIT(PORTD,4);
 162:	82 b3       	in	r24, 0x12	; 18
 164:	8f 7e       	andi	r24, 0xEF	; 239
 166:	82 bb       	out	0x12, r24	; 18
			count--;
			_delay_ms(400);
		}
		count++;
		//alarm
		while (READBIT(PIND,1)==1){
 168:	81 99       	sbic	0x10, 1	; 16
 16a:	ef cf       	rjmp	.-34     	; 0x14a <main+0xde>
 16c:	bb cf       	rjmp	.-138    	; 0xe4 <main+0x78>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

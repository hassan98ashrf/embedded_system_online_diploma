/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
typedef volatile unsigned int vuint32_t;
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>

//define  register
#define RCC_BASE   			 0x40021000
#define RCC_APB2ENR    		 *(volatile uint32_t *)(RCC_BASE +0x18)
#define RCC_IOPAEN   		 (1<<2)

#define GPIOA_BASE  		 0x40010800
#define GPIOA_CRL   		 *(volatile uint32_t *)(GPIOA_BASE +0x00)
#define GPIOA_CRH   		 *(volatile uint32_t *)(GPIOA_BASE +0x04)
#define GPIOA_ODR  			 *(volatile uint32_t *)(GPIOA_BASE +0x0C)
#define GPIOA_IDR  			 *(volatile uint32_t *)(GPIOA_BASE +0x08)
#define GPIOA13				 (1UL<<13)

#define GPIOB_BASE  		 0x40010C00
#define GPIOB_CRL   		 *(volatile uint32_t *)(GPIOB_BASE +0x00)
#define GPIOB_CRH   		 *(volatile uint32_t *)(GPIOB_BASE +0x04)
#define GPIOB_ODR  			 *(volatile uint32_t *)(GPIOB_BASE +0x0C)
#define GPIOB_IDR  			 *(volatile uint32_t *)(GPIOB_BASE +0x08)

void clock_init(){
	//Enable  GPIOA  clock
	RCC_APB2ENR |= RCC_IOPAEN;
	//Enable  GPIOB  clock
	 RCC_APB2ENR |= 1<<3	;

}

void GPIO_init(){
	GPIOA_CRL =0x0;
	GPIOB_CRL =0x0;

	//PA1 INPUT HIGH Z
	GPIOA_CRL |= 1<<6;

	//PB1 OUTPUT PUSH PULL
	GPIOB_CRL &= ~(0b11 << 6);
	GPIOB_CRL |=  (0b01 << 4);

	//PA13 INPUT HIGH Z
	GPIOA_CRH &= ~(0b11 << 20);
	GPIOA_CRH |=  (0b01 << 22);
	//PB13 OUTPUT PUSH PUL
	GPIOB_CRH |=  (0b01 << 20);
	GPIOB_CRH &= ~(0b11 << 22);
}

int main(){
	clock_init();
	GPIO_init();

	while(1){
		//PA1 >>> Exit pull up
		if((GPIOA_IDR & (1<<1)>>1) == 0 ){
			GPIOB_ODR ^= (1<<1);
			while(((GPIOA_IDR & (1<<1)>>1) == 0 ));//single press
		}
		//PA13 >>> Exit pull up
		if((GPIOA_IDR & (1<<13)>>13) == 1 ){
			GPIOB_ODR ^= (1<<1);
			while(((GPIOA_IDR & (1<<1)>>1) == 0 ));//single press
		}



	}

}



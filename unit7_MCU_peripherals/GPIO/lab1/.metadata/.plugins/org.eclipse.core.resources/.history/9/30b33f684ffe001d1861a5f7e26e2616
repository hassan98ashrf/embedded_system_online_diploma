/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
typedef volatile unsigned int vuint32_t;
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>

//define  register
#define RCC_BASE   		 0x40021000
#define RCC_APB2ENR      *(volatile uint32_t *)(RCC_BASE +0x18)
#define RCC_IOPAEN   	 (1<<2)

#define GPIO_BASE  		 0x40010800
#define GPIO_CRL   		 *(volatile uint32_t *)(GPIO_BASE +0x00)
#define GPIO_CRH   		 *(volatile uint32_t *)(GPIO_BASE +0x04)
#define GPIO_ODR  		 *(volatile uint32_t *)(GPIO_BASE +0x0C)
#define GPIOA13			 (1UL<<13)

#define EXTI_BASE  		 0x40010400
#define EXTI_IMR   		 *(volatile uint32_t *)(EXTI_BASE +0x00)
#define EXTI_RTSR  		 *(volatile uint32_t *)(EXTI_BASE +0x08)
#define EXTI_PR  		 *(volatile uint32_t *)(EXTI_BASE +0x14)

#define AFIO_BASE  		 0x40010000
#define AFIO_EXTICR1   	 *(volatile uint32_t *)(AFIO_BASE +0x08)

#define NVIC_EXTE0   	 *(volatile uint32_t *)(0xE000E100)

void clock_init(){
	//Enable  GPIO  clock
	RCC_APB2ENR |= RCC_IOPAEN;
	RCC_APB2ENR |= (1<<0);
}

void GPIO_init(){
	//Pin 13 port  A output
	GPIO_CRH  &=  0xFF0FFFFF;
	GPIO_CRH  |=  0x00200000;
	//01: Floating input (reset state)
	GPIO_CRL |= (1<<2);
	//enable NVIC IEQ6
	NVIC_EXTE0 |= (1<<6);
}

int main(){
	clock_init();
	GPIO_init();
	// EXTI0 configuration (x= 0)
	AFIO_EXTICR1 = 0;
	//enable rising edge
	EXTI_RTSR |= (1<<0);
	//enable extti   line 0
	EXTI_IMR  |= (1<<0);
	return 0;
}

void EXTI0_IRQHandler(void){
	//IRQ is happend EXT0  >>> PORT pin 0 raising edge
	// Toggle portA pin13
	GPIO_ODR ^= (1<<13);
	//clear pending request
	EXTI_PR  |= (1<<0);
}

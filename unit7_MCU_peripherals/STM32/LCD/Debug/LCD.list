
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00010e20  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00010e20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e20  00010e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e20  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000339f  00000000  00000000  00010e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000858  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009cc  00000000  00000000  00014a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000155b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000099f  00000000  00000000  00015718  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bc4  00000000  00000000  000160b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000094a5  00000000  00000000  00017c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000053c  00000000  00000000  0002119c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ddc 	.word	0x08000ddc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ddc 	.word	0x08000ddc

08000170 <delay_ms>:



#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fd41 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fd33 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fd25 	bl	8000c4a <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 fd18 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 fd0b 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fcfe 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fcf1 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fce4 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 fcd7 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 fcca 	bl	8000c4a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 fcbd 	bl	8000c4a <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 fd36 	bl	8000d48 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fd30 	bl	8000d48 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fd2a 	bl	8000d48 <MCAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000020 	.word	0x20000020
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f85b 	bl	80003c0 <LCD_WRITE_COMMAND>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_lcd_kick+0x28>)
 800031c:	f000 fd14 	bl	8000d48 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_lcd_kick+0x28>)
 800032e:	f000 fd0b 	bl	8000d48 <MCAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d805      	bhi.n	8000364 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b80      	subs	r3, #128	; 0x80
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f82e 	bl	80003c0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d108      	bne.n	800037c <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d805      	bhi.n	800037c <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	3b40      	subs	r3, #64	; 0x40
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f822 	bl	80003c0 <LCD_WRITE_COMMAND>
		}
	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_INIT>:

void LCD_INIT() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800038e:	f7ff ff0b 	bl	80001a8 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff feec 	bl	8000170 <delay_ms>
	LCD_WRITE_COMMAND(LCD_Return_Home);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 f811 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_clear_screen();
 800039e:	f7ff ffaf 	bl	8000300 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80003a2:	2038      	movs	r0, #56	; 0x38
 80003a4:	f000 f80c 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a8:	2006      	movs	r0, #6
 80003aa:	f000 f809 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003ae:	2080      	movs	r0, #128	; 0x80
 80003b0:	f000 f806 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003b4:	200f      	movs	r0, #15
 80003b6:	f000 f803 	bl	80003c0 <LCD_WRITE_COMMAND>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003d2:	f000 fcd0 	bl	8000d76 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003de:	f000 fcb3 	bl	8000d48 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003ea:	f000 fcad 	bl	8000d48 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff febe 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003f4:	f7ff ff8c 	bl	8000310 <LCD_lcd_kick>

}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40010800 	.word	0x40010800

08000404 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	b29b      	uxth	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 8000416:	f000 fcae 	bl	8000d76 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000420:	4808      	ldr	r0, [pc, #32]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 8000422:	f000 fc91 	bl	8000d48 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 800042e:	f000 fc8b 	bl	8000d48 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff fe9c 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000438:	f7ff ff6a 	bl	8000310 <LCD_lcd_kick>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010800 	.word	0x40010800

08000448 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000454:	e01c      	b.n	8000490 <LCD_WRITE_STRING+0x48>
		count++;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffcd 	bl	8000404 <LCD_WRITE_CHAR>
		if (count == 16) {
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b10      	cmp	r3, #16
 800046e:	d104      	bne.n	800047a <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000470:	2100      	movs	r1, #0
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff ff62 	bl	800033c <LCD_GOTO_XY>
 8000478:	e00a      	b.n	8000490 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b20      	cmp	r3, #32
 800047e:	d107      	bne.n	8000490 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000480:	f7ff ff3e 	bl	8000300 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff58 	bl	800033c <LCD_GOTO_XY>
			count = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1de      	bne.n	8000456 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <Clock_init>:
#include "keypad.h"


uint8_t IRQ_flag=0;

void Clock_init(){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	//ENABLE CLOCK GPIOA
	RCC_GPIOA_CLK_EN();
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <Clock_init+0x30>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <Clock_init+0x30>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
	//ENABLE CLOCK GPIOB
	RCC_GPIOB_CLK_EN();
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <Clock_init+0x30>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <Clock_init+0x30>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
	AFIO_GPIOE_CLK_EN();
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <Clock_init+0x30>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <Clock_init+0x30>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6193      	str	r3, [r2, #24]


}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000

080004d4 <wait_ms>:
void wait_ms(uint32_t time) {
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e00b      	b.n	80004fa <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	e002      	b.n	80004ee <wait_ms+0x1a>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	2bfe      	cmp	r3, #254	; 0xfe
 80004f2:	d9f9      	bls.n	80004e8 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3301      	adds	r3, #1
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3ef      	bcc.n	80004e2 <wait_ms+0xe>
			;
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <EXTI9_CallBack>:

void EXTI9_CallBack(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	IRQ_flag = 1;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <EXTI9_CallBack+0x1c>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI is happened_");
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <EXTI9_CallBack+0x20>)
 8000518:	f7ff ff96 	bl	8000448 <LCD_WRITE_STRING>
	wait_ms(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f7ff ffd8 	bl	80004d4 <wait_ms>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000001c 	.word	0x2000001c
 800052c:	08000df4 	.word	0x08000df4

08000530 <main>:


int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
	 Clock_init();
 8000536:	f7ff ffb3 	bl	80004a0 <Clock_init>
	 LCD_INIT();
 800053a:	f7ff ff23 	bl	8000384 <LCD_INIT>
	 LCD_clear_screen();
 800053e:	f7ff fedf 	bl	8000300 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <main+0x4c>)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_case = EXIT_Trigger_RISING;
 800054c:	2300      	movs	r3, #0
 800054e:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <main+0x50>)
 8000552:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXIT_IRQ_Enable;
 8000554:	2301      	movs	r3, #1
 8000556:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f9f6 	bl	800094c <MCAL_EXTI_GPIO_Init>

	IRQ_flag=1;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <main+0x54>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		if(IRQ_flag)
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <main+0x54>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0fb      	beq.n	8000566 <main+0x36>
		{
			LCD_clear_screen();
 800056e:	f7ff fec7 	bl	8000300 <LCD_clear_screen>
			IRQ_flag=0;
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <main+0x54>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
		if(IRQ_flag)
 8000578:	e7f5      	b.n	8000566 <main+0x36>
 800057a:	bf00      	nop
 800057c:	08000e0c 	.word	0x08000e0c
 8000580:	0800050d 	.word	0x0800050d
 8000584:	2000001c 	.word	0x2000001c

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 fbed 	bl	8000d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff ffb9 	bl	8000530 <main>

080005be <LoopForever>:

LoopForever:
    b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005cc:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 80005d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d4:	20000060 	.word	0x20000060

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <Enable_NVIC>:

//================================
//GENERIC FUNCTIONS
//================================
void Enable_NVIC(uint16_t IRQ)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d853      	bhi.n	8000694 <Enable_NVIC+0xb8>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <Enable_NVIC+0x18>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000635 	.word	0x08000635
 80005f8:	08000643 	.word	0x08000643
 80005fc:	08000651 	.word	0x08000651
 8000600:	0800065f 	.word	0x0800065f
 8000604:	0800066d 	.word	0x0800066d
 8000608:	0800067b 	.word	0x0800067b
 800060c:	0800067b 	.word	0x0800067b
 8000610:	0800067b 	.word	0x0800067b
 8000614:	0800067b 	.word	0x0800067b
 8000618:	0800067b 	.word	0x0800067b
 800061c:	08000687 	.word	0x08000687
 8000620:	08000687 	.word	0x08000687
 8000624:	08000687 	.word	0x08000687
 8000628:	08000687 	.word	0x08000687
 800062c:	08000687 	.word	0x08000687
 8000630:	08000687 	.word	0x08000687
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <Enable_NVIC+0xc4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <Enable_NVIC+0xc4>)
 800063a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063e:	6013      	str	r3, [r2, #0]
		break;
 8000640:	e028      	b.n	8000694 <Enable_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <Enable_NVIC+0xc4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <Enable_NVIC+0xc4>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6013      	str	r3, [r2, #0]
		break;
 800064e:	e021      	b.n	8000694 <Enable_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <Enable_NVIC+0xc4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <Enable_NVIC+0xc4>)
 8000656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065a:	6013      	str	r3, [r2, #0]
		break;
 800065c:	e01a      	b.n	8000694 <Enable_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <Enable_NVIC+0xc4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <Enable_NVIC+0xc4>)
 8000664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000668:	6013      	str	r3, [r2, #0]
		break;
 800066a:	e013      	b.n	8000694 <Enable_NVIC+0xb8>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <Enable_NVIC+0xc4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <Enable_NVIC+0xc4>)
 8000672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000676:	6013      	str	r3, [r2, #0]
		break;
 8000678:	e00c      	b.n	8000694 <Enable_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <Enable_NVIC+0xc4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <Enable_NVIC+0xc4>)
 8000680:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000684:	6013      	str	r3, [r2, #0]
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <Enable_NVIC+0xc8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <Enable_NVIC+0xc8>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000690:	6013      	str	r3, [r2, #0]
		//break;
	}
}
 8000692:	e7ff      	b.n	8000694 <Enable_NVIC+0xb8>
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000e104 	.word	0xe000e104

080006a8 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d853      	bhi.n	8000760 <Disable_NVIC+0xb8>
 80006b8:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <Disable_NVIC+0x18>)
 80006ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006be:	bf00      	nop
 80006c0:	08000701 	.word	0x08000701
 80006c4:	0800070f 	.word	0x0800070f
 80006c8:	0800071d 	.word	0x0800071d
 80006cc:	0800072b 	.word	0x0800072b
 80006d0:	08000739 	.word	0x08000739
 80006d4:	08000747 	.word	0x08000747
 80006d8:	08000747 	.word	0x08000747
 80006dc:	08000747 	.word	0x08000747
 80006e0:	08000747 	.word	0x08000747
 80006e4:	08000747 	.word	0x08000747
 80006e8:	08000753 	.word	0x08000753
 80006ec:	08000753 	.word	0x08000753
 80006f0:	08000753 	.word	0x08000753
 80006f4:	08000753 	.word	0x08000753
 80006f8:	08000753 	.word	0x08000753
 80006fc:	08000753 	.word	0x08000753
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <Disable_NVIC+0xc4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <Disable_NVIC+0xc4>)
 8000706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070a:	6013      	str	r3, [r2, #0]
		break;
 800070c:	e028      	b.n	8000760 <Disable_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <Disable_NVIC+0xc4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <Disable_NVIC+0xc4>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6013      	str	r3, [r2, #0]
		break;
 800071a:	e021      	b.n	8000760 <Disable_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <Disable_NVIC+0xc4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <Disable_NVIC+0xc4>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000726:	6013      	str	r3, [r2, #0]
		break;
 8000728:	e01a      	b.n	8000760 <Disable_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <Disable_NVIC+0xc4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <Disable_NVIC+0xc4>)
 8000730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000734:	6013      	str	r3, [r2, #0]
		break;
 8000736:	e013      	b.n	8000760 <Disable_NVIC+0xb8>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <Disable_NVIC+0xc4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <Disable_NVIC+0xc4>)
 800073e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000742:	6013      	str	r3, [r2, #0]
		break;
 8000744:	e00c      	b.n	8000760 <Disable_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <Disable_NVIC+0xc4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <Disable_NVIC+0xc4>)
 800074c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000750:	6013      	str	r3, [r2, #0]
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <Disable_NVIC+0xc8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <Disable_NVIC+0xc8>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6013      	str	r3, [r2, #0]
		//break;
	}
}
 800075e:	e7ff      	b.n	8000760 <Disable_NVIC+0xb8>
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e180 	.word	0xe000e180
 8000770:	e000e184 	.word	0xe000e184

08000774 <Update_EXTI>:




void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	//1- config GPIO to be AF input
	GPIO_PinConfig_t PinCfg;
	//update GPIO pin tto be Floating inputtt
	PinCfg.GPIO_PinNumber =EXTI_Config-> EXTI_PIN.GPIO_PIN;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	891b      	ldrh	r3, [r3, #8]
 8000780:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 8000782:	2301      	movs	r3, #1
 8000784:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config ->EXTI_PIN .GPIO_Port,&PinCfg);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f107 0208 	add.w	r2, r7, #8
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fa5a 	bl	8000c4a <MCAL_GPIO_Init>

	//2- update AFIO to route bettwwn EXTI liine with ports ABCD
	uint8_t AFIO_EXTICR_index= EXTI_Config -> EXTI_PIN.EIT_InputLineNumber /4;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	b29b      	uxth	r3, r3
 800079e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_Config-> EXTI_PIN.EIT_InputLineNumber % 4)*4;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	73bb      	strb	r3, [r7, #14]

	//clear 4 bit

	AFIO-> EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_Position);
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <Update_EXTI+0x1bc>)
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	3302      	adds	r3, #2
 80007b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	210f      	movs	r1, #15
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	495a      	ldr	r1, [pc, #360]	; (8000930 <Update_EXTI+0x1bc>)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4002      	ands	r2, r0
 80007cc:	3302      	adds	r3, #2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO-> EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)&0xF)<< AFIO_EXTICR_Position);
 80007d2:	4a57      	ldr	r2, [pc, #348]	; (8000930 <Update_EXTI+0x1bc>)
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	3302      	adds	r3, #2
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4954      	ldr	r1, [pc, #336]	; (8000934 <Update_EXTI+0x1c0>)
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d016      	beq.n	8000814 <Update_EXTI+0xa0>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4953      	ldr	r1, [pc, #332]	; (8000938 <Update_EXTI+0x1c4>)
 80007ec:	428b      	cmp	r3, r1
 80007ee:	d00f      	beq.n	8000810 <Update_EXTI+0x9c>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4951      	ldr	r1, [pc, #324]	; (800093c <Update_EXTI+0x1c8>)
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d008      	beq.n	800080c <Update_EXTI+0x98>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4950      	ldr	r1, [pc, #320]	; (8000940 <Update_EXTI+0x1cc>)
 8000800:	428b      	cmp	r3, r1
 8000802:	d101      	bne.n	8000808 <Update_EXTI+0x94>
 8000804:	2303      	movs	r3, #3
 8000806:	e006      	b.n	8000816 <Update_EXTI+0xa2>
 8000808:	2300      	movs	r3, #0
 800080a:	e004      	b.n	8000816 <Update_EXTI+0xa2>
 800080c:	2302      	movs	r3, #2
 800080e:	e002      	b.n	8000816 <Update_EXTI+0xa2>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <Update_EXTI+0xa2>
 8000814:	2300      	movs	r3, #0
 8000816:	7bb9      	ldrb	r1, [r7, #14]
 8000818:	408b      	lsls	r3, r1
 800081a:	4618      	mov	r0, r3
 800081c:	4944      	ldr	r1, [pc, #272]	; (8000930 <Update_EXTI+0x1bc>)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4302      	orrs	r2, r0
 8000822:	3302      	adds	r3, #2
 8000824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	//3- update rising or falling register
	EXTI->RSTR &= ~(1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 8000828:	4b46      	ldr	r3, [pc, #280]	; (8000944 <Update_EXTI+0x1d0>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	2201      	movs	r2, #1
 8000834:	408a      	lsls	r2, r1
 8000836:	43d2      	mvns	r2, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a42      	ldr	r2, [pc, #264]	; (8000944 <Update_EXTI+0x1d0>)
 800083c:	400b      	ands	r3, r1
 800083e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <Update_EXTI+0x1d0>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4611      	mov	r1, r2
 800084a:	2201      	movs	r2, #1
 800084c:	408a      	lsls	r2, r1
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a3c      	ldr	r2, [pc, #240]	; (8000944 <Update_EXTI+0x1d0>)
 8000854:	400b      	ands	r3, r1
 8000856:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_case == EXIT_Trigger_RISING)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7b1b      	ldrb	r3, [r3, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10b      	bne.n	8000878 <Update_EXTI+0x104>
	{
		EXTI->RSTR |= (1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <Update_EXTI+0x1d0>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	8812      	ldrh	r2, [r2, #0]
 8000868:	4611      	mov	r1, r2
 800086a:	2201      	movs	r2, #1
 800086c:	408a      	lsls	r2, r1
 800086e:	4611      	mov	r1, r2
 8000870:	4a34      	ldr	r2, [pc, #208]	; (8000944 <Update_EXTI+0x1d0>)
 8000872:	430b      	orrs	r3, r1
 8000874:	6093      	str	r3, [r2, #8]
 8000876:	e029      	b.n	80008cc <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_case == EXIT_Trigger_FALLING)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b1b      	ldrb	r3, [r3, #12]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <Update_EXTI+0x1d0>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	8812      	ldrh	r2, [r2, #0]
 8000888:	4611      	mov	r1, r2
 800088a:	2201      	movs	r2, #1
 800088c:	408a      	lsls	r2, r1
 800088e:	4611      	mov	r1, r2
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <Update_EXTI+0x1d0>)
 8000892:	430b      	orrs	r3, r1
 8000894:	60d3      	str	r3, [r2, #12]
 8000896:	e019      	b.n	80008cc <Update_EXTI+0x158>
	}else if(EXTI_Config->Trigger_case == EXIT_Trigger_RISING_FALLING)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7b1b      	ldrb	r3, [r3, #12]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d115      	bne.n	80008cc <Update_EXTI+0x158>
	{
		EXTI->RSTR |= (1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <Update_EXTI+0x1d0>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	4611      	mov	r1, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	408a      	lsls	r2, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a24      	ldr	r2, [pc, #144]	; (8000944 <Update_EXTI+0x1d0>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <Update_EXTI+0x1d0>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	8812      	ldrh	r2, [r2, #0]
 80008be:	4611      	mov	r1, r2
 80008c0:	2201      	movs	r2, #1
 80008c2:	408a      	lsls	r2, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <Update_EXTI+0x1d0>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	60d3      	str	r3, [r2, #12]
	}

	//4- update IRQ handlling callback

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EIT_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <Update_EXTI+0x1d4>)
 80008d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	//5- enable disable IRQ&NVIC
	if(EXTI_Config->IRQ_EN == EXIT_IRQ_Enable)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7b5b      	ldrb	r3, [r3, #13]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d110      	bne.n	8000906 <Update_EXTI+0x192>
	{
		EXTI->IMR |=(1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <Update_EXTI+0x1d0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	4611      	mov	r1, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	408a      	lsls	r2, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <Update_EXTI+0x1d0>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe6c 	bl	80005dc <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EIT_InputLineNumber);

	}

}
 8000904:	e010      	b.n	8000928 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <Update_EXTI+0x1d0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	4611      	mov	r1, r2
 8000910:	2201      	movs	r2, #1
 8000912:	408a      	lsls	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <Update_EXTI+0x1d0>)
 800091a:	400b      	ands	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EIT_InputLineNumber);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fec0 	bl	80006a8 <Disable_NVIC>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40010000 	.word	0x40010000
 8000934:	40010800 	.word	0x40010800
 8000938:	40010c00 	.word	0x40010c00
 800093c:	40011000 	.word	0x40011000
 8000940:	40011400 	.word	0x40011400
 8000944:	40010400 	.word	0x40010400
 8000948:	20000024 	.word	0x20000024

0800094c <MCAL_EXTI_GPIO_Init>:
 * @param [in] 		-EXTI config set b @ref EXTI_define,EXTI_Trigger_define and EXTI_IRQ_define
 * @retval 			-none
 * Note				-this function at start programming
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff0d 	bl	8000774 <Update_EXTI>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <EXTI0_IRQHandler>:
//ISR FUNCTIONS
//================================


void EXTI0_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<0;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <EXTI0_IRQHandler+0x1c>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <EXTI0_IRQHandler+0x1c>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <EXTI0_IRQHandler+0x20>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4798      	blx	r3
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010400 	.word	0x40010400
 8000984:	20000024 	.word	0x20000024

08000988 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<1;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <EXTI1_IRQHandler+0x1c>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <EXTI1_IRQHandler+0x1c>)
 8000992:	f043 0302 	orr.w	r3, r3, #2
 8000996:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <EXTI1_IRQHandler+0x20>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4798      	blx	r3
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010400 	.word	0x40010400
 80009a8:	20000024 	.word	0x20000024

080009ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<2;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <EXTI2_IRQHandler+0x1c>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <EXTI2_IRQHandler+0x1c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <EXTI2_IRQHandler+0x20>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	4798      	blx	r3
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010400 	.word	0x40010400
 80009cc:	20000024 	.word	0x20000024

080009d0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<3;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <EXTI3_IRQHandler+0x1c>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <EXTI3_IRQHandler+0x1c>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <EXTI3_IRQHandler+0x20>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4798      	blx	r3
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010400 	.word	0x40010400
 80009f0:	20000024 	.word	0x20000024

080009f4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<4;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <EXTI4_IRQHandler+0x1c>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <EXTI4_IRQHandler+0x1c>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <EXTI4_IRQHandler+0x20>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	4798      	blx	r3
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40010400 	.word	0x40010400
 8000a14:	20000024 	.word	0x20000024

08000a18 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5	;	GP_IRQ_CallBack[5]();	}
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f003 0320 	and.w	r3, r3, #32
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d008      	beq.n	8000a3a <EXTI9_5_IRQHandler+0x22>
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	6153      	str	r3, [r2, #20]
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <EXTI9_5_IRQHandler+0xa4>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4798      	blx	r3
	if(EXTI->PR & 1<<6){EXTI->PR |= 1<<6	;	GP_IRQ_CallBack[6]();	}
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d008      	beq.n	8000a58 <EXTI9_5_IRQHandler+0x40>
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <EXTI9_5_IRQHandler+0xa4>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4798      	blx	r3
	if(EXTI->PR & 1<<7){EXTI->PR |= 1<<7	;	GP_IRQ_CallBack[7]();	}
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <EXTI9_5_IRQHandler+0x5e>
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <EXTI9_5_IRQHandler+0xa4>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4798      	blx	r3
	if(EXTI->PR & 1<<8){EXTI->PR |= 1<<8	;	GP_IRQ_CallBack[8]();	}
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <EXTI9_5_IRQHandler+0x7c>
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <EXTI9_5_IRQHandler+0xa4>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	4798      	blx	r3
	if(EXTI->PR & 1<<9){EXTI->PR |= 1<<9	;	GP_IRQ_CallBack[9]();	}
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <EXTI9_5_IRQHandler+0x9a>
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <EXTI9_5_IRQHandler+0xa0>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6153      	str	r3, [r2, #20]
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <EXTI9_5_IRQHandler+0xa4>)
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	4798      	blx	r3

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40010400 	.word	0x40010400
 8000abc:	20000024 	.word	0x20000024

08000ac0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10	;	GP_IRQ_CallBack[10]();	}
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d008      	beq.n	8000ae2 <EXTI15_10_IRQHandler+0x22>
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6153      	str	r3, [r2, #20]
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11	;	GP_IRQ_CallBack[11]();	}
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d008      	beq.n	8000b00 <EXTI15_10_IRQHandler+0x40>
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12	;	GP_IRQ_CallBack[12]();	}
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <EXTI15_10_IRQHandler+0x5e>
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b16:	6153      	str	r3, [r2, #20]
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13	;	GP_IRQ_CallBack[13]();	}
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <EXTI15_10_IRQHandler+0x7c>
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14	;	GP_IRQ_CallBack[14]();	}
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <EXTI15_10_IRQHandler+0x9a>
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6153      	str	r3, [r2, #20]
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b58:	4798      	blx	r3
	if(EXTI->PR & 1<<15){EXTI->PR |= 1<<15	;	GP_IRQ_CallBack[15]();	}
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <EXTI15_10_IRQHandler+0xb8>
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <EXTI15_10_IRQHandler+0xbc>)
 8000b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <EXTI15_10_IRQHandler+0xc0>)
 8000b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b76:	4798      	blx	r3

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	20000024 	.word	0x20000024

08000b84 <Get_CRLH_Position>:
#include "stm32_f103c6_driver_GPIO.h"
#include "stm32_f103c6.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	2b80      	cmp	r3, #128	; 0x80
 8000b92:	d042      	beq.n	8000c1a <Get_CRLH_Position+0x96>
 8000b94:	2b80      	cmp	r3, #128	; 0x80
 8000b96:	dc11      	bgt.n	8000bbc <Get_CRLH_Position+0x38>
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d036      	beq.n	8000c0a <Get_CRLH_Position+0x86>
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	dc06      	bgt.n	8000bae <Get_CRLH_Position+0x2a>
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d02e      	beq.n	8000c02 <Get_CRLH_Position+0x7e>
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d02e      	beq.n	8000c06 <Get_CRLH_Position+0x82>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d028      	beq.n	8000bfe <Get_CRLH_Position+0x7a>
 8000bac:	e047      	b.n	8000c3e <Get_CRLH_Position+0xba>
 8000bae:	2b20      	cmp	r3, #32
 8000bb0:	d02f      	beq.n	8000c12 <Get_CRLH_Position+0x8e>
 8000bb2:	2b40      	cmp	r3, #64	; 0x40
 8000bb4:	d02f      	beq.n	8000c16 <Get_CRLH_Position+0x92>
 8000bb6:	2b10      	cmp	r3, #16
 8000bb8:	d029      	beq.n	8000c0e <Get_CRLH_Position+0x8a>
 8000bba:	e040      	b.n	8000c3e <Get_CRLH_Position+0xba>
 8000bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc0:	d033      	beq.n	8000c2a <Get_CRLH_Position+0xa6>
 8000bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc6:	dc09      	bgt.n	8000bdc <Get_CRLH_Position+0x58>
 8000bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bcc:	d029      	beq.n	8000c22 <Get_CRLH_Position+0x9e>
 8000bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd2:	d028      	beq.n	8000c26 <Get_CRLH_Position+0xa2>
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d021      	beq.n	8000c1e <Get_CRLH_Position+0x9a>
 8000bda:	e030      	b.n	8000c3e <Get_CRLH_Position+0xba>
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be0:	d027      	beq.n	8000c32 <Get_CRLH_Position+0xae>
 8000be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be6:	dc03      	bgt.n	8000bf0 <Get_CRLH_Position+0x6c>
 8000be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bec:	d01f      	beq.n	8000c2e <Get_CRLH_Position+0xaa>
 8000bee:	e026      	b.n	8000c3e <Get_CRLH_Position+0xba>
 8000bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bf4:	d01f      	beq.n	8000c36 <Get_CRLH_Position+0xb2>
 8000bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bfa:	d01e      	beq.n	8000c3a <Get_CRLH_Position+0xb6>
 8000bfc:	e01f      	b.n	8000c3e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e01e      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000c02:	2304      	movs	r3, #4
 8000c04:	e01c      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 8000c06:	2308      	movs	r3, #8
 8000c08:	e01a      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	e018      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	e016      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000c12:	2314      	movs	r3, #20
 8000c14:	e014      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000c16:	2318      	movs	r3, #24
 8000c18:	e012      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000c1a:	231c      	movs	r3, #28
 8000c1c:	e010      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e00e      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000c22:	2304      	movs	r3, #4
 8000c24:	e00c      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000c26:	2308      	movs	r3, #8
 8000c28:	e00a      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	e008      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	e006      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000c32:	2314      	movs	r3, #20
 8000c34:	e004      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000c36:	2318      	movs	r3, #24
 8000c38:	e002      	b.n	8000c40 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000c3a:	231c      	movs	r3, #28
 8000c3c:	e000      	b.n	8000c40 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000c4a:	b590      	push	{r4, r7, lr}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d801      	bhi.n	8000c68 <MCAL_GPIO_Init+0x1e>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	e001      	b.n	8000c6c <MCAL_GPIO_Init+0x22>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff86 	bl	8000b84 <Get_CRLH_Position>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	401a      	ands	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d00b      	beq.n	8000cac <MCAL_GPIO_Init+0x62>
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	2b06      	cmp	r3, #6
 8000c9a:	d007      	beq.n	8000cac <MCAL_GPIO_Init+0x62>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b05      	cmp	r3, #5
 8000ca2:	d003      	beq.n	8000cac <MCAL_GPIO_Init+0x62>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d10e      	bne.n	8000cca <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	3b04      	subs	r3, #4
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e02c      	b.n	8000d24 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d003      	beq.n	8000cda <MCAL_GPIO_Init+0x90>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	789b      	ldrb	r3, [r3, #2]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d107      	bne.n	8000cea <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e01c      	b.n	8000d24 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d102      	bne.n	8000cf8 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e015      	b.n	8000d24 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	789b      	ldrb	r3, [r3, #2]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d107      	bne.n	8000d14 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	8812      	ldrh	r2, [r2, #0]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	e007      	b.n	8000d24 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	8812      	ldrh	r2, [r2, #0]
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000d24:	7bfc      	ldrb	r4, [r7, #15]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff2a 	bl	8000b84 <Get_CRLH_Position>
 8000d30:	4603      	mov	r3, r0
 8000d32:	fa04 f203 	lsl.w	r2, r4, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	601a      	str	r2, [r3, #0]

}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}

08000d48 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000d58:	787b      	ldrb	r3, [r7, #1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 8000d64:	e002      	b.n	8000d6c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	615a      	str	r2, [r3, #20]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60da      	str	r2, [r3, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <__libc_init_array>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	2500      	movs	r5, #0
 8000d98:	4e0c      	ldr	r6, [pc, #48]	; (8000dcc <__libc_init_array+0x38>)
 8000d9a:	4c0d      	ldr	r4, [pc, #52]	; (8000dd0 <__libc_init_array+0x3c>)
 8000d9c:	1ba4      	subs	r4, r4, r6
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	42a5      	cmp	r5, r4
 8000da2:	d109      	bne.n	8000db8 <__libc_init_array+0x24>
 8000da4:	f000 f81a 	bl	8000ddc <_init>
 8000da8:	2500      	movs	r5, #0
 8000daa:	4e0a      	ldr	r6, [pc, #40]	; (8000dd4 <__libc_init_array+0x40>)
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <__libc_init_array+0x44>)
 8000dae:	1ba4      	subs	r4, r4, r6
 8000db0:	10a4      	asrs	r4, r4, #2
 8000db2:	42a5      	cmp	r5, r4
 8000db4:	d105      	bne.n	8000dc2 <__libc_init_array+0x2e>
 8000db6:	bd70      	pop	{r4, r5, r6, pc}
 8000db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbc:	4798      	blx	r3
 8000dbe:	3501      	adds	r5, #1
 8000dc0:	e7ee      	b.n	8000da0 <__libc_init_array+0xc>
 8000dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc6:	4798      	blx	r3
 8000dc8:	3501      	adds	r5, #1
 8000dca:	e7f2      	b.n	8000db2 <__libc_init_array+0x1e>
 8000dcc:	08000e18 	.word	0x08000e18
 8000dd0:	08000e18 	.word	0x08000e18
 8000dd4:	08000e18 	.word	0x08000e18
 8000dd8:	08000e1c 	.word	0x08000e1c

08000ddc <_init>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr

08000de8 <_fini>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr


Auto_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002cb4  08002cbc  00012cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002cb4  08002cb4  00012cbc  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb4  08002cb4  00012cbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb4  08002cbc  00012cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb4  08002cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000000  08002cbc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08002cbc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012cbc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d5d  00000000  00000000  00012cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e78  00000000  00000000  00015a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c8  00000000  00000000  000168c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002d0  00000000  00000000  00016c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001973  00000000  00000000  00016f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000021ca  00000000  00000000  000188d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000065bd  00000000  00000000  0001aa9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002105a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  000210d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002c9c 	.word	0x08002c9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08002c9c 	.word	0x08002c9c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <DCMOTOR_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void DCMOTOR_voidInit(DCMotor_Cfg* p2UserConfig)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    // Only Supported Timer3 
    if(p2UserConfig->Timerx == Timer3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d16a      	bne.n	8000a9a <DCMOTOR_voidInit+0xe6>
    {
        // Init Timer Clocks and Used Ports 
    	RCC_voidInitSysClocks();
 80009c4:	f001 fcfe 	bl	80023c4 <RCC_voidInitSysClocks>
    	RCC_voidEnableClock(RCC_AHB, p2UserConfig->CW_Port);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	789b      	ldrb	r3, [r3, #2]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2000      	movs	r0, #0
 80009d0:	f001 fcb8 	bl	8002344 <RCC_voidEnableClock>
    	RCC_voidEnableClock(RCC_AHB, p2UserConfig->CCW_Port);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	4619      	mov	r1, r3
 80009da:	2000      	movs	r0, #0
 80009dc:	f001 fcb2 	bl	8002344 <RCC_voidEnableClock>

    	RCC_voidEnableClock(RCC_APB1, Timer3);
 80009e0:	2101      	movs	r1, #1
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 fcae 	bl	8002344 <RCC_voidEnableClock>

    	// Set CW/CCW Port Pin as output
    	GPIO_voidSetPinDirection( p2UserConfig->CW_Port, p2UserConfig->CW_Pin, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7898      	ldrb	r0, [r3, #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	78db      	ldrb	r3, [r3, #3]
 80009f0:	2220      	movs	r2, #32
 80009f2:	4619      	mov	r1, r3
 80009f4:	f000 faa6 	bl	8000f44 <GPIO_voidSetPinDirection>
        GPIO_voidSetPinDirection( p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7918      	ldrb	r0, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	795b      	ldrb	r3, [r3, #5]
 8000a00:	2220      	movs	r2, #32
 8000a02:	4619      	mov	r1, r3
 8000a04:	f000 fa9e 	bl	8000f44 <GPIO_voidSetPinDirection>

    	// Set CW to HIGH and CCW to HIGH to Brake Motor @ first
    	GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7898      	ldrb	r0, [r3, #2]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	78db      	ldrb	r3, [r3, #3]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f000 fca4 	bl	8001360 <GPIO_voidSetPinValue>
    	GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7918      	ldrb	r0, [r3, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f000 fc9c 	bl	8001360 <GPIO_voidSetPinValue>


    	// AFIOs Based on Channel Support only Channel 1 and Channel 2
        if(p2UserConfig->CHANNEL_x == CHANNEL_1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10e      	bne.n	8000a4e <DCMOTOR_voidInit+0x9a>
        {
        	RCC_voidEnableClock(RCC_AHB, PORTB);
 8000a30:	2112      	movs	r1, #18
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 fc86 	bl	8002344 <RCC_voidEnableClock>
        	GPIO_voidSetPinDirection(PORTB	, PIN4, GPIO_AF_LOW_SPD);
 8000a38:	2240      	movs	r2, #64	; 0x40
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	2012      	movs	r0, #18
 8000a3e:	f000 fa81 	bl	8000f44 <GPIO_voidSetPinDirection>
        	GPIO_voidSetAFIO(PORTB	, PIN4, AFIO_2);	//TIM3CH1
 8000a42:	2202      	movs	r2, #2
 8000a44:	2104      	movs	r1, #4
 8000a46:	2012      	movs	r0, #18
 8000a48:	f000 fcfe 	bl	8001448 <GPIO_voidSetAFIO>
 8000a4c:	e011      	b.n	8000a72 <DCMOTOR_voidInit+0xbe>
        }
        else if (p2UserConfig->CHANNEL_x == CHANNEL_2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10d      	bne.n	8000a72 <DCMOTOR_voidInit+0xbe>
        {
        	RCC_voidEnableClock(RCC_AHB, PORTC);
 8000a56:	2113      	movs	r1, #19
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 fc73 	bl	8002344 <RCC_voidEnableClock>

        	GPIO_voidSetPinDirection(PORTC	, PIN7, GPIO_AF_LOW_SPD);
 8000a5e:	2240      	movs	r2, #64	; 0x40
 8000a60:	2107      	movs	r1, #7
 8000a62:	2013      	movs	r0, #19
 8000a64:	f000 fa6e 	bl	8000f44 <GPIO_voidSetPinDirection>
        	GPIO_voidSetAFIO(PORTC	, PIN7, AFIO_2);	//TIM3CH2
 8000a68:	2202      	movs	r2, #2
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	2013      	movs	r0, #19
 8000a6e:	f000 fceb 	bl	8001448 <GPIO_voidSetAFIO>
        else
        {
            // <!TODO> Not Supported Yet 
        }
        //  PWM Configurations config name _Global_PWM_Timer3_Inst
        _Global_PWM_Timer3_Inst.Timerx = Timer3;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <DCMOTOR_voidInit+0xf0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
        _Global_PWM_Timer3_Inst.DIR_xCOUNTING = DIR_UPCOUNTING;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <DCMOTOR_voidInit+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	705a      	strb	r2, [r3, #1]
        _Global_PWM_Timer3_Inst.TIMx_u32TopValue = 256;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <DCMOTOR_voidInit+0xf0>)
 8000a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a84:	605a      	str	r2, [r3, #4]
        _Global_PWM_Timer3_Inst.TIMx_PWM_Mode_CHx[p2UserConfig->CHANNEL_x] = PWM_MODE_1;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <DCMOTOR_voidInit+0xf0>)
 8000a8e:	4413      	add	r3, r2
 8000a90:	2206      	movs	r2, #6
 8000a92:	721a      	strb	r2, [r3, #8]

        // Init PWM 
    	PWM_voidInit(& _Global_PWM_Timer3_Inst);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <DCMOTOR_voidInit+0xf0>)
 8000a96:	f001 fb73 	bl	8002180 <PWM_voidInit>
    }
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000001c 	.word	0x2000001c

08000aa8 <DCMOTOR_voidSetDirection>:

void DCMOTOR_voidSetDirection(DCMotor_Cfg* p2UserConfig,Motor_Dir_t copy_xMotorDir)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
    // Only Supported Timer3 
	if(p2UserConfig->Timerx == Timer3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d13a      	bne.n	8000b32 <DCMOTOR_voidSetDirection+0x8a>
	{
		switch (copy_xMotorDir)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d015      	beq.n	8000aee <DCMOTOR_voidSetDirection+0x46>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d024      	beq.n	8000b10 <DCMOTOR_voidSetDirection+0x68>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d000      	beq.n	8000acc <DCMOTOR_voidSetDirection+0x24>
			/*IN1 = 0 & IN2 = 1*/
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , HIGH);
			break;
        default:
            break;
 8000aca:	e033      	b.n	8000b34 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7898      	ldrb	r0, [r3, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f000 fc42 	bl	8001360 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7918      	ldrb	r0, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f000 fc3a 	bl	8001360 <GPIO_voidSetPinValue>
			break;
 8000aec:	e022      	b.n	8000b34 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , HIGH);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7898      	ldrb	r0, [r3, #2]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	78db      	ldrb	r3, [r3, #3]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	f000 fc31 	bl	8001360 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , LOW);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7918      	ldrb	r0, [r3, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f000 fc29 	bl	8001360 <GPIO_voidSetPinValue>
			break;
 8000b0e:	e011      	b.n	8000b34 <DCMOTOR_voidSetDirection+0x8c>
			GPIO_voidSetPinValue(p2UserConfig->CW_Port, p2UserConfig->CW_Pin , LOW);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7898      	ldrb	r0, [r3, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f000 fc20 	bl	8001360 <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(p2UserConfig->CCW_Port, p2UserConfig->CCW_Pin , HIGH);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7918      	ldrb	r0, [r3, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f000 fc18 	bl	8001360 <GPIO_voidSetPinValue>
			break;
 8000b30:	e000      	b.n	8000b34 <DCMOTOR_voidSetDirection+0x8c>
        }
    }
 8000b32:	bf00      	nop
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <DCMOTOR_voidSetSpeed>:

void DCMOTOR_voidSetSpeed(DCMotor_Cfg* p2UserConfig,u16 copy_u16MotorSpeed)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
    // Only Supported Timer3 
    if(p2UserConfig->Timerx == Timer3)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10b      	bne.n	8000b68 <DCMOTOR_voidSetSpeed+0x2c>
    {   
    	if(_Global_PWM_Timer3_Inst.TIMx_u32TopValue > copy_u16MotorSpeed)
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <DCMOTOR_voidSetSpeed+0x34>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d906      	bls.n	8000b68 <DCMOTOR_voidSetSpeed+0x2c>
    	{
            // Only TWO Channels Supported
        	PWM_voidSetDutyCycle(&_Global_PWM_Timer3_Inst , copy_u16MotorSpeed , p2UserConfig->CHANNEL_x);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	785a      	ldrb	r2, [r3, #1]
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	4619      	mov	r1, r3
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <DCMOTOR_voidSetSpeed+0x34>)
 8000b64:	f001 fbd2 	bl	800230c <PWM_voidSetDutyCycle>

    	}

    }   
 }
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000001c 	.word	0x2000001c
 8000b74:	00000000 	.word	0x00000000

08000b78 <ICU_TIM2_EdgeCallback>:

/******************************************************************************
* Module Private Functions 
*******************************************************************************/
static void ICU_TIM2_EdgeCallback(u32 Counts)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    /************** LOCAL Variables **********************/ 
    static u32 IC_Val1 = 0;
    static u32 IC_Val2 = 0;
    static u32 Difference = 0;
    static u8 Is_First_Captured = 0;
    u8 Distance  = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
    if (Is_First_Captured==0) // if the first value is not captured
 8000b84:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <ICU_TIM2_EdgeCallback+0x108>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10c      	bne.n	8000ba6 <ICU_TIM2_EdgeCallback+0x2e>
    {
        IC_Val1 = Counts; // read the first value
 8000b8c:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
        IC_Val2= 0 ;
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
        Is_First_Captured = 1;  // set the first captured as true
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <ICU_TIM2_EdgeCallback+0x108>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
        Is_Timer_Busy[2] = 1 ;
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <ICU_TIM2_EdgeCallback+0x114>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	709a      	strb	r2, [r3, #2]
        // Interrupt will be disabled
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
        Is_Timer_Busy[2] = 0 ; 
    }

}
 8000ba4:	e061      	b.n	8000c6a <ICU_TIM2_EdgeCallback+0xf2>
    else if (Is_First_Captured==1)   // if the first is already captured
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <ICU_TIM2_EdgeCallback+0x108>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d15d      	bne.n	8000c6a <ICU_TIM2_EdgeCallback+0xf2>
        IC_Val2 = Counts;  // read second value
 8000bae:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
        if (IC_Val2 > IC_Val1)
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d907      	bls.n	8000bd0 <ICU_TIM2_EdgeCallback+0x58>
            Difference = IC_Val2-IC_Val1;
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <ICU_TIM2_EdgeCallback+0x118>)
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e00f      	b.n	8000bf0 <ICU_TIM2_EdgeCallback+0x78>
        else if (IC_Val1 > IC_Val2)
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d909      	bls.n	8000bf0 <ICU_TIM2_EdgeCallback+0x78>
            Difference = (Global_ICU_TIMx.ICU_Max_Counting - IC_Val1) + IC_Val2;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <ICU_TIM2_EdgeCallback+0x11c>)
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1ad2      	subs	r2, r2, r3
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <ICU_TIM2_EdgeCallback+0x118>)
 8000bee:	6013      	str	r3, [r2, #0]
        Distance = ((Difference * 0.017) / (8)) + FIXED_US_ERROR_IN_CM;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <ICU_TIM2_EdgeCallback+0x118>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fc31 	bl	800045c <__aeabi_ui2d>
 8000bfa:	a31f      	add	r3, pc, #124	; (adr r3, 8000c78 <ICU_TIM2_EdgeCallback+0x100>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fca6 	bl	8000550 <__aeabi_dmul>
 8000c04:	4603      	mov	r3, r0
 8000c06:	460c      	mov	r4, r1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <ICU_TIM2_EdgeCallback+0x120>)
 8000c12:	f7ff fdc7 	bl	80007a4 <__aeabi_ddiv>
 8000c16:	4603      	mov	r3, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <ICU_TIM2_EdgeCallback+0x124>)
 8000c24:	f7ff fade 	bl	80001e4 <__adddf3>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	4621      	mov	r1, r4
 8000c30:	f7ff fea0 	bl	8000974 <__aeabi_d2uiz>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
        Is_First_Captured = 0; // set it back to false
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <ICU_TIM2_EdgeCallback+0x108>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
        IC_Val1 = 0 ;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <ICU_TIM2_EdgeCallback+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
        IC_Val2 = 0 ;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <ICU_TIM2_EdgeCallback+0x110>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
        Global_US_Config[2][2]->p2Function(Distance);
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <ICU_TIM2_EdgeCallback+0x128>)
 8000c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	4610      	mov	r0, r2
 8000c54:	4798      	blx	r3
        ICU_voidResetTimer(&Global_ICU_TIMx);
 8000c56:	480f      	ldr	r0, [pc, #60]	; (8000c94 <ICU_TIM2_EdgeCallback+0x11c>)
 8000c58:	f001 f9d2 	bl	8002000 <ICU_voidResetTimer>
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <ICU_TIM2_EdgeCallback+0x11c>)
 8000c60:	f001 f932 	bl	8001ec8 <ICU_voidDisableChannelIRQ>
        Is_Timer_Busy[2] = 0 ; 
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <ICU_TIM2_EdgeCallback+0x114>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	709a      	strb	r2, [r3, #2]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	f3af 8000 	nop.w
 8000c78:	b020c49c 	.word	0xb020c49c
 8000c7c:	3f916872 	.word	0x3f916872
 8000c80:	2000007c 	.word	0x2000007c
 8000c84:	20000080 	.word	0x20000080
 8000c88:	20000084 	.word	0x20000084
 8000c8c:	20000078 	.word	0x20000078
 8000c90:	20000088 	.word	0x20000088
 8000c94:	20000028 	.word	0x20000028
 8000c98:	40200000 	.word	0x40200000
 8000c9c:	3ff00000 	.word	0x3ff00000
 8000ca0:	20000038 	.word	0x20000038

08000ca4 <US_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void US_voidInit(Ultrasonic_Cfg *p2UserConfig)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    // Only Timer 2 Supported 
    if(p2UserConfig->Timerx == Timer2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d16c      	bne.n	8000d8e <US_voidInit+0xea>
    {
        /*          RCC Init        */
        #if NUXED_US_ENABLE == 1 
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < US_NUMBER; LOC_u8Counter++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e022      	b.n	8000d00 <US_voidInit+0x5c>
        {
            RCC_voidEnableClock(RCC_AHB, p2UserConfig->Trig_Port[LOC_u8Counter]);
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	789b      	ldrb	r3, [r3, #2]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f001 fb3d 	bl	8002344 <RCC_voidEnableClock>
            GPIO_voidSetPinDirection(p2UserConfig->Trig_Port[LOC_u8Counter],p2UserConfig->Trig_Pin[LOC_u8Counter], GPIO_OUTPUT_HIGH_SPD_PUSH_PULL);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	7898      	ldrb	r0, [r3, #2]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	222c      	movs	r2, #44	; 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f000 f931 	bl	8000f44 <GPIO_voidSetPinDirection>
            GPIO_voidSetPinValue(p2UserConfig->Trig_Port[LOC_u8Counter],p2UserConfig->Trig_Pin[LOC_u8Counter], LOW);
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	7898      	ldrb	r0, [r3, #2]
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	799b      	ldrb	r3, [r3, #6]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f000 fb33 	bl	8001360 <GPIO_voidSetPinValue>
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < US_NUMBER; LOC_u8Counter++)
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d9d9      	bls.n	8000cba <US_voidInit+0x16>
        RCC_voidEnableClock(RCC_AHB, p2UserConfig->Trig_Port);
        /*          Trig Port as Output     */ 
        GPIO_voidSetPinDirection(p2UserConfig->Trig_Port,p2UserConfig->Trig_Pin, GPIO_OUTPUT_HIGH_SPD_PUSH_PULL);
        #endif 
        // PWM Init
        Global_ICU_TIMx.Timerx = Timer2 ;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <US_voidInit+0xf4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
        Global_ICU_TIMx.ICU_u16Prescaler = 0 ;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <US_voidInit+0xf4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	815a      	strh	r2, [r3, #10]
        Global_ICU_TIMx.ICU_Max_Counting = 0xFFFFFFFF ;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <US_voidInit+0xf4>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	60da      	str	r2, [r3, #12]
        // Channel Related 
        if(p2UserConfig->CHANNEL_x == CHANNEL_3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d127      	bne.n	8000d72 <US_voidInit+0xce>
        {
            // Echo Pin
            RCC_voidEnableClock(RCC_APB1, Timer2);	/*	TIMER2	*/
 8000d22:	2100      	movs	r1, #0
 8000d24:	2001      	movs	r0, #1
 8000d26:	f001 fb0d 	bl	8002344 <RCC_voidEnableClock>
            /*          AFIOs                   */
            // Configure PB10 alternate function
            GPIO_voidSetPinDirection(PORTB	, PIN10, GPIO_AF_HIGH_SPD);
 8000d2a:	224c      	movs	r2, #76	; 0x4c
 8000d2c:	210a      	movs	r1, #10
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f000 f908 	bl	8000f44 <GPIO_voidSetPinDirection>
            GPIO_voidSetAFIO(PORTB	, PIN10, AFIO_1);	//TIM2CH3
 8000d34:	2201      	movs	r2, #1
 8000d36:	210a      	movs	r1, #10
 8000d38:	2012      	movs	r0, #18
 8000d3a:	f000 fb85 	bl	8001448 <GPIO_voidSetAFIO>

            /*      Inits       */
            Global_ICU_TIMx.ICU_CAPTURE_x_EDGE[CHANNEL_3] = ICU_CAPTURE_BOTH_EDGE ;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <US_voidInit+0xf4>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	71da      	strb	r2, [r3, #7]
            if(p2UserConfig->US_x == US_IRQs && p2UserConfig->p2Function != NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a9b      	ldrb	r3, [r3, #10]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d10f      	bne.n	8000d6c <US_voidInit+0xc8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00b      	beq.n	8000d6c <US_voidInit+0xc8>
            {
                Global_ICU_TIMx.ICU_CHECK_MECHNSIM_x[CHANNEL_3] = ICU_CHECK_MECHNSIM_IRQs ;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <US_voidInit+0xf4>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	70da      	strb	r2, [r3, #3]
                ICU_voidGetCapturedValueAsynch(&Global_ICU_TIMx, CHANNEL_3, ICU_TIM2_EdgeCallback);
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <US_voidInit+0xf8>)
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <US_voidInit+0xf4>)
 8000d60:	f001 f882 	bl	8001e68 <ICU_voidGetCapturedValueAsynch>
                /******************************** ICU NVIC	**********************************************/
                nvic_enableInterrupt(28);
 8000d64:	201c      	movs	r0, #28
 8000d66:	f001 f9e7 	bl	8002138 <nvic_enableInterrupt>
 8000d6a:	e002      	b.n	8000d72 <US_voidInit+0xce>
            }
            else 
                Global_ICU_TIMx.ICU_CHECK_MECHNSIM_x[CHANNEL_3] = ICU_CHECK_MECHNSIM_POLLING ;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <US_voidInit+0xf4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	70da      	strb	r2, [r3, #3]

        }
    	ICU_voidInit(&Global_ICU_TIMx);
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <US_voidInit+0xf4>)
 8000d74:	f000 fc18 	bl	80015a8 <ICU_voidInit>
    	// For Channel 3 Only
        ICU_voidDisableChannelIRQ(&Global_ICU_TIMx, CHANNEL_3);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <US_voidInit+0xf4>)
 8000d7c:	f001 f8a4 	bl	8001ec8 <ICU_voidDisableChannelIRQ>

    	Global_US_Config[2][p2UserConfig->CHANNEL_x] = p2UserConfig ;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	785b      	ldrb	r3, [r3, #1]
 8000d84:	4906      	ldr	r1, [pc, #24]	; (8000da0 <US_voidInit+0xfc>)
 8000d86:	3308      	adds	r3, #8
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    }
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000028 	.word	0x20000028
 8000d9c:	08000b79 	.word	0x08000b79
 8000da0:	20000038 	.word	0x20000038
 8000da4:	00000000 	.word	0x00000000

08000da8 <US_voidGetDistanceSynch>:

US_ERROR_t US_voidGetDistanceSynch(Ultrasonic_Cfg *p2UserConfig , u16* pData_DistanceInCM,u8 copy_u8UltrasonicIndex)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b08b      	sub	sp, #44	; 0x2c
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	4613      	mov	r3, r2
 8000db4:	71fb      	strb	r3, [r7, #7]
     u32 IC_Val1 = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
     u32 IC_Val2 = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
     u32 Difference = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
     u16 Distance ;
     ICU_Error_t LOC_eICU_Signal1_State = ICU_OK ;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
     ICU_Error_t LOC_eICU_Signal2_State = ICU_OK ;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
     US_ERROR_t LOC_eReturnState = US_INVALID_READING ;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

     volatile u32 LOC_u32Counter = 0 ;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
    if(p2UserConfig->Timerx == Timer2)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f040 8081 	bne.w	8000ee4 <US_voidGetDistanceSynch+0x13c>
    {
        if(Is_Timer_Busy[2] == 0)
 8000de2:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <US_voidGetDistanceSynch+0x150>)
 8000de4:	789b      	ldrb	r3, [r3, #2]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d17c      	bne.n	8000ee4 <US_voidGetDistanceSynch+0x13c>
        {
            // Trig Pin
            TrigUltrasonic( p2UserConfig->Trig_Port[copy_u8UltrasonicIndex],p2UserConfig->Trig_Pin[copy_u8UltrasonicIndex]) ;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	7899      	ldrb	r1, [r3, #2]
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	799b      	ldrb	r3, [r3, #6]
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	777a      	strb	r2, [r7, #29]
 8000dfe:	773b      	strb	r3, [r7, #28]
    GPIO_voidSetPinValue(copy_u8TrigPort, copy_u8Pin , HIGH);
 8000e00:	7f39      	ldrb	r1, [r7, #28]
 8000e02:	7f7b      	ldrb	r3, [r7, #29]
 8000e04:	2201      	movs	r2, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 faaa 	bl	8001360 <GPIO_voidSetPinValue>
    delay_us(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f000 f87f 	bl	8000f10 <delay_us>
    GPIO_voidSetPinValue(copy_u8TrigPort, copy_u8Pin , LOW);
 8000e12:	7f39      	ldrb	r1, [r7, #28]
 8000e14:	7f7b      	ldrb	r3, [r7, #29]
 8000e16:	2200      	movs	r2, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 faa1 	bl	8001360 <GPIO_voidSetPinValue>

            LOC_eICU_Signal1_State = ICU_voidGetCapturedValueSynch(&Global_ICU_TIMx, CHANNEL_3, &IC_Val1);
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	461a      	mov	r2, r3
 8000e24:	2102      	movs	r1, #2
 8000e26:	4835      	ldr	r0, [pc, #212]	; (8000efc <US_voidGetDistanceSynch+0x154>)
 8000e28:	f000 ff8e 	bl	8001d48 <ICU_voidGetCapturedValueSynch>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            LOC_eICU_Signal2_State = ICU_voidGetCapturedValueSynch(&Global_ICU_TIMx, CHANNEL_3, &IC_Val2);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	461a      	mov	r2, r3
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4830      	ldr	r0, [pc, #192]	; (8000efc <US_voidGetDistanceSynch+0x154>)
 8000e3c:	f000 ff84 	bl	8001d48 <ICU_voidGetCapturedValueSynch>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            if(LOC_eICU_Signal1_State == ICU_OK && LOC_eICU_Signal2_State == ICU_OK)
 8000e46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d147      	bne.n	8000ede <US_voidGetDistanceSynch+0x136>
 8000e4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d143      	bne.n	8000ede <US_voidGetDistanceSynch+0x136>
            {
            	/*	Set it as valid Reading	*/
            	LOC_eReturnState = US_VALID_READING;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                /*  Reset The Counter   */
                if (IC_Val2 > IC_Val1)
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d904      	bls.n	8000e6e <US_voidGetDistanceSynch+0xc6>
                {
                    Difference = IC_Val2-IC_Val1;
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6c:	e00a      	b.n	8000e84 <US_voidGetDistanceSynch+0xdc>
                }

                else if (IC_Val1 > IC_Val2)
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d906      	bls.n	8000e84 <US_voidGetDistanceSynch+0xdc>
                {
                    Difference = (Global_ICU_TIMx.ICU_Max_Counting - IC_Val1) + IC_Val2;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <US_voidGetDistanceSynch+0x154>)
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // Tick Time = 0.25 ;
                // 	DISTANCE(M) = (DIFF * 0.017)/(TIM_CLK_MHz/(PS+1));
                Distance = (Difference * 0.017) / (8);
 8000e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e86:	f7ff fae9 	bl	800045c <__aeabi_ui2d>
 8000e8a:	a319      	add	r3, pc, #100	; (adr r3, 8000ef0 <US_voidGetDistanceSynch+0x148>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	f7ff fb5e 	bl	8000550 <__aeabi_dmul>
 8000e94:	4603      	mov	r3, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <US_voidGetDistanceSynch+0x158>)
 8000ea2:	f7ff fc7f 	bl	80007a4 <__aeabi_ddiv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	4621      	mov	r1, r4
 8000eae:	f7ff fd61 	bl	8000974 <__aeabi_d2uiz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	83fb      	strh	r3, [r7, #30]
               // Distance = (Difference * (0.017));
                *pData_DistanceInCM = (Distance+FIXED_US_ERROR_IN_CM) ;
 8000eb6:	8bfb      	ldrh	r3, [r7, #30]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	801a      	strh	r2, [r3, #0]
                ICU_voidResetTimer(&Global_ICU_TIMx);
 8000ec0:	480e      	ldr	r0, [pc, #56]	; (8000efc <US_voidGetDistanceSynch+0x154>)
 8000ec2:	f001 f89d 	bl	8002000 <ICU_voidResetTimer>
            	for(LOC_u32Counter=0 ; LOC_u32Counter < DELAYS_BETWEEN_READINGS_IN_TERMS_OF_COUNTS ;LOC_u32Counter++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	e003      	b.n	8000ed4 <US_voidGetDistanceSynch+0x12c>
            	{
            		__asm("NOP");
 8000ecc:	bf00      	nop
            	for(LOC_u32Counter=0 ; LOC_u32Counter < DELAYS_BETWEEN_READINGS_IN_TERMS_OF_COUNTS ;LOC_u32Counter++)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000eda:	d3f7      	bcc.n	8000ecc <US_voidGetDistanceSynch+0x124>
            if(LOC_eICU_Signal1_State == ICU_OK && LOC_eICU_Signal2_State == ICU_OK)
 8000edc:	e002      	b.n	8000ee4 <US_voidGetDistanceSynch+0x13c>
            	}

            }
            else
            {
            	LOC_eReturnState = US_INVALID_READING ;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
        }
    }
    return LOC_eReturnState ;
 8000ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	372c      	adds	r7, #44	; 0x2c
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	b020c49c 	.word	0xb020c49c
 8000ef4:	3f916872 	.word	0x3f916872
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20000028 	.word	0x20000028
 8000f00:	40200000 	.word	0x40200000

08000f04 <delay_init>:
#include "STK/STK_interface.h"
#endif
#include "SW_Delay.h"

void delay_init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
#if DELAY_BASED_ON == STK_DELAY
    STK_voidInit();
 8000f08:	f001 fa98 	bl	800243c <STK_voidInit>
#endif

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <delay_us>:
void delay_us(u32 microseconds)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    for (u32 i = 0; i < loops; ++i)
    {
        __asm("NOP");
    }
#elif DELAY_BASED_ON == STK_DELAY
    STK_voidSetBusyWait_US((u16)microseconds);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fad1 	bl	80024c4 <STK_voidSetBusyWait_US>
#endif
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <delay_ms>:

void delay_ms(u32 milliseconds) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
        : [loops] "+r" (loops)
        :
        :
    );
#elif DELAY_BASED_ON == STK_DELAY
    STK_voidSetBusyWait_MS((u16)milliseconds);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fa90 	bl	800245c <STK_voidSetBusyWait_MS>
#endif

}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	4613      	mov	r3, r2
 8000f54:	717b      	strb	r3, [r7, #5]

	u8 copy_u8Moder = 0, copy_OTYPER= 0 , copy_OSPEEDR = 0 , copy_PUPDR = 0  ;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	737b      	strb	r3, [r7, #13]
 8000f62:	2300      	movs	r3, #0
 8000f64:	733b      	strb	r3, [r7, #12]

	copy_u8Moder |= (CHECK_BIT(Copy_u8Mode,6)<<1) | CHECK_BIT(Copy_u8Mode,5) ;
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	099b      	lsrs	r3, r3, #6
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	73fb      	strb	r3, [r7, #15]
	copy_OTYPER  |= CHECK_BIT(Copy_u8Mode,4);
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	73bb      	strb	r3, [r7, #14]
	copy_OSPEEDR |= (CHECK_BIT(Copy_u8Mode,3)<<1) | CHECK_BIT(Copy_u8Mode,2) ;
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	797b      	ldrb	r3, [r7, #5]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	737b      	strb	r3, [r7, #13]
	copy_PUPDR   |=(CHECK_BIT(Copy_u8Mode,1)<<1) | CHECK_BIT(Copy_u8Mode,0) ;
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	733b      	strb	r3, [r7, #12]
	switch(Copy_u8Port)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3b11      	subs	r3, #17
 8001002:	2b03      	cmp	r3, #3
 8001004:	f200 8197 	bhi.w	8001336 <GPIO_voidSetPinDirection+0x3f2>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <GPIO_voidSetPinDirection+0xcc>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001021 	.word	0x08001021
 8001014:	080010ff 	.word	0x080010ff
 8001018:	080011bd 	.word	0x080011bd
 800101c:	0800127b 	.word	0x0800127b
	{
		case PORTA :

			if (Copy_Pin <= PIN15 )
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f200 8189 	bhi.w	800133a <GPIO_voidSetPinDirection+0x3f6>
			{
				GPIOA->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 8001028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	0052      	lsls	r2, r2, #1
 8001032:	2103      	movs	r1, #3
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	43d2      	mvns	r2, r2
 800103a:	4611      	mov	r1, r2
 800103c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001040:	400b      	ands	r3, r1
 8001042:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER &= ~(1 << Copy_Pin );
 8001044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	79ba      	ldrb	r2, [r7, #6]
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	43d2      	mvns	r2, r2
 8001054:	4611      	mov	r1, r2
 8001056:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105a:	400b      	ands	r3, r1
 800105c:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 800105e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	0052      	lsls	r2, r2, #1
 8001068:	2103      	movs	r1, #3
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	43d2      	mvns	r2, r2
 8001070:	4611      	mov	r1, r2
 8001072:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001076:	400b      	ands	r3, r1
 8001078:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 800107a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	0052      	lsls	r2, r2, #1
 8001084:	2103      	movs	r1, #3
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	43d2      	mvns	r2, r2
 800108c:	4611      	mov	r1, r2
 800108e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001092:	400b      	ands	r3, r1
 8001094:	60d3      	str	r3, [r2, #12]


				GPIOA->MODER |= (copy_u8Moder <<  (2*Copy_Pin));
 8001096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	7bf9      	ldrb	r1, [r7, #15]
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	0052      	lsls	r2, r2, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	4611      	mov	r1, r2
 80010a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80010b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	7bb9      	ldrb	r1, [r7, #14]
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	4611      	mov	r1, r2
 80010c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 80010c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	7b79      	ldrb	r1, [r7, #13]
 80010d0:	79ba      	ldrb	r2, [r7, #6]
 80010d2:	0052      	lsls	r2, r2, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010de:	430b      	orrs	r3, r1
 80010e0:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 80010e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	7b39      	ldrb	r1, [r7, #12]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	4611      	mov	r1, r2
 80010f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010f8:	430b      	orrs	r3, r1
 80010fa:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 80010fc:	e11d      	b.n	800133a <GPIO_voidSetPinDirection+0x3f6>
		case PORTB :
			if (Copy_Pin <= PIN15 )
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	f200 811c 	bhi.w	800133e <GPIO_voidSetPinDirection+0x3fa>
			{

				GPIOB->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 8001106:	4b93      	ldr	r3, [pc, #588]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	79ba      	ldrb	r2, [r7, #6]
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	2103      	movs	r1, #3
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	43d2      	mvns	r2, r2
 8001116:	4611      	mov	r1, r2
 8001118:	4a8e      	ldr	r2, [pc, #568]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 800111a:	400b      	ands	r3, r1
 800111c:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER &= ~(1 << Copy_Pin );
 800111e:	4b8d      	ldr	r3, [pc, #564]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	79ba      	ldrb	r2, [r7, #6]
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	43d2      	mvns	r2, r2
 800112c:	4611      	mov	r1, r2
 800112e:	4a89      	ldr	r2, [pc, #548]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001130:	400b      	ands	r3, r1
 8001132:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 8001134:	4b87      	ldr	r3, [pc, #540]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	0052      	lsls	r2, r2, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	43d2      	mvns	r2, r2
 8001144:	4611      	mov	r1, r2
 8001146:	4a83      	ldr	r2, [pc, #524]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001148:	400b      	ands	r3, r1
 800114a:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 800114c:	4b81      	ldr	r3, [pc, #516]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	2103      	movs	r1, #3
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	43d2      	mvns	r2, r2
 800115c:	4611      	mov	r1, r2
 800115e:	4a7d      	ldr	r2, [pc, #500]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001160:	400b      	ands	r3, r1
 8001162:	60d3      	str	r3, [r2, #12]

				GPIOB->MODER |= (copy_u8Moder << (2*Copy_Pin)) ;
 8001164:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7bf9      	ldrb	r1, [r7, #15]
 800116a:	79ba      	ldrb	r2, [r7, #6]
 800116c:	0052      	lsls	r2, r2, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	4611      	mov	r1, r2
 8001174:	4a77      	ldr	r2, [pc, #476]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001176:	430b      	orrs	r3, r1
 8001178:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin );
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	7bb9      	ldrb	r1, [r7, #14]
 8001180:	79ba      	ldrb	r2, [r7, #6]
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	4611      	mov	r1, r2
 8001188:	4a72      	ldr	r2, [pc, #456]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 800118a:	430b      	orrs	r3, r1
 800118c:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << ( 2*Copy_Pin )) ;
 800118e:	4b71      	ldr	r3, [pc, #452]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	7b79      	ldrb	r1, [r7, #13]
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	0052      	lsls	r2, r2, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4611      	mov	r1, r2
 800119e:	4a6d      	ldr	r2, [pc, #436]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< (2*Copy_Pin));
 80011a4:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	7b39      	ldrb	r1, [r7, #12]
 80011aa:	79ba      	ldrb	r2, [r7, #6]
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4a67      	ldr	r2, [pc, #412]	; (8001354 <GPIO_voidSetPinDirection+0x410>)
 80011b6:	430b      	orrs	r3, r1
 80011b8:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 80011ba:	e0c0      	b.n	800133e <GPIO_voidSetPinDirection+0x3fa>
		case PORTC :
			if (Copy_Pin <= PIN15 )
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f200 80bf 	bhi.w	8001342 <GPIO_voidSetPinDirection+0x3fe>
			{
				GPIOC->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 80011c4:	4b64      	ldr	r3, [pc, #400]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	79ba      	ldrb	r2, [r7, #6]
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	2103      	movs	r1, #3
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	43d2      	mvns	r2, r2
 80011d4:	4611      	mov	r1, r2
 80011d6:	4a60      	ldr	r2, [pc, #384]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 80011d8:	400b      	ands	r3, r1
 80011da:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER &= ~(1 << Copy_Pin );
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	79ba      	ldrb	r2, [r7, #6]
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	43d2      	mvns	r2, r2
 80011ea:	4611      	mov	r1, r2
 80011ec:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 80011ee:	400b      	ands	r3, r1
 80011f0:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 80011f2:	4b59      	ldr	r3, [pc, #356]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	79ba      	ldrb	r2, [r7, #6]
 80011f8:	0052      	lsls	r2, r2, #1
 80011fa:	2103      	movs	r1, #3
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	43d2      	mvns	r2, r2
 8001202:	4611      	mov	r1, r2
 8001204:	4a54      	ldr	r2, [pc, #336]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001206:	400b      	ands	r3, r1
 8001208:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	0052      	lsls	r2, r2, #1
 8001212:	2103      	movs	r1, #3
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	43d2      	mvns	r2, r2
 800121a:	4611      	mov	r1, r2
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 800121e:	400b      	ands	r3, r1
 8001220:	60d3      	str	r3, [r2, #12]

				GPIOC->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	7bf9      	ldrb	r1, [r7, #15]
 8001228:	79ba      	ldrb	r2, [r7, #6]
 800122a:	0052      	lsls	r2, r2, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	4611      	mov	r1, r2
 8001232:	4a49      	ldr	r2, [pc, #292]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001234:	430b      	orrs	r3, r1
 8001236:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8001238:	4b47      	ldr	r3, [pc, #284]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	7bb9      	ldrb	r1, [r7, #14]
 800123e:	79ba      	ldrb	r2, [r7, #6]
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	4611      	mov	r1, r2
 8001246:	4a44      	ldr	r2, [pc, #272]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001248:	430b      	orrs	r3, r1
 800124a:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	7b79      	ldrb	r1, [r7, #13]
 8001252:	79ba      	ldrb	r2, [r7, #6]
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	4611      	mov	r1, r2
 800125c:	4a3e      	ldr	r2, [pc, #248]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 800125e:	430b      	orrs	r3, r1
 8001260:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	7b39      	ldrb	r1, [r7, #12]
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	0052      	lsls	r2, r2, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4611      	mov	r1, r2
 8001272:	4a39      	ldr	r2, [pc, #228]	; (8001358 <GPIO_voidSetPinDirection+0x414>)
 8001274:	430b      	orrs	r3, r1
 8001276:	60d3      	str	r3, [r2, #12]
			}
			else
			{
				/* error */
			}
			break ;
 8001278:	e063      	b.n	8001342 <GPIO_voidSetPinDirection+0x3fe>
		case PORTD :
			if (Copy_Pin <= PIN15 )
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d862      	bhi.n	8001346 <GPIO_voidSetPinDirection+0x402>
			{

				GPIOD->MODER &= ~(0b11 << (2*Copy_Pin)) ;
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	0052      	lsls	r2, r2, #1
 8001288:	2103      	movs	r1, #3
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	43d2      	mvns	r2, r2
 8001290:	4611      	mov	r1, r2
 8001292:	4a32      	ldr	r2, [pc, #200]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 8001294:	400b      	ands	r3, r1
 8001296:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER &= ~(1 << Copy_Pin );
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	79ba      	ldrb	r2, [r7, #6]
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	4611      	mov	r1, r2
 80012a8:	4a2c      	ldr	r2, [pc, #176]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012aa:	400b      	ands	r3, r1
 80012ac:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR &= ~ (0b11 << ( 2*Copy_Pin )) ;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	79ba      	ldrb	r2, [r7, #6]
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	2103      	movs	r1, #3
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	43d2      	mvns	r2, r2
 80012be:	4611      	mov	r1, r2
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012c2:	400b      	ands	r3, r1
 80012c4:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  &= ~ (0b11<< (2*Copy_Pin));
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	79ba      	ldrb	r2, [r7, #6]
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	2103      	movs	r1, #3
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	4611      	mov	r1, r2
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012da:	400b      	ands	r3, r1
 80012dc:	60d3      	str	r3, [r2, #12]

				GPIOD->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	7bf9      	ldrb	r1, [r7, #15]
 80012e4:	79ba      	ldrb	r2, [r7, #6]
 80012e6:	0052      	lsls	r2, r2, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4611      	mov	r1, r2
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	7bb9      	ldrb	r1, [r7, #14]
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 8001304:	430b      	orrs	r3, r1
 8001306:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	7b79      	ldrb	r1, [r7, #13]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4611      	mov	r1, r2
 8001318:	4a10      	ldr	r2, [pc, #64]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 800131a:	430b      	orrs	r3, r1
 800131c:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	7b39      	ldrb	r1, [r7, #12]
 8001324:	79ba      	ldrb	r2, [r7, #6]
 8001326:	0052      	lsls	r2, r2, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	4611      	mov	r1, r2
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <GPIO_voidSetPinDirection+0x418>)
 8001330:	430b      	orrs	r3, r1
 8001332:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 8001334:	e007      	b.n	8001346 <GPIO_voidSetPinDirection+0x402>
		default : break ;	
 8001336:	bf00      	nop
 8001338:	e006      	b.n	8001348 <GPIO_voidSetPinDirection+0x404>
			break;
 800133a:	bf00      	nop
 800133c:	e004      	b.n	8001348 <GPIO_voidSetPinDirection+0x404>
			break;
 800133e:	bf00      	nop
 8001340:	e002      	b.n	8001348 <GPIO_voidSetPinDirection+0x404>
			break ;
 8001342:	bf00      	nop
 8001344:	e000      	b.n	8001348 <GPIO_voidSetPinDirection+0x404>
			break;
 8001346:	bf00      	nop
	}

}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	48000c00 	.word	0x48000c00

08001360 <GPIO_voidSetPinValue>:
		default :  break ;
	}

}
void GPIO_voidSetPinValue(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Value)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
	//GPIOA->BSRR = 0x0000ffff;
	switch(Copy_u8Port)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	3b11      	subs	r3, #17
 8001376:	2b03      	cmp	r3, #3
 8001378:	d858      	bhi.n	800142c <GPIO_voidSetPinValue+0xcc>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <GPIO_voidSetPinValue+0x20>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001391 	.word	0x08001391
 8001384:	080013bb 	.word	0x080013bb
 8001388:	080013e1 	.word	0x080013e1
 800138c:	08001407 	.word	0x08001407
	{
		case PORTA :		
			switch (Copy_u8Value)
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <GPIO_voidSetPinValue+0x4a>
 8001396:	2b01      	cmp	r3, #1
 8001398:	d000      	beq.n	800139c <GPIO_voidSetPinValue+0x3c>
				case LOW  :	
					GPIOA->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 800139a:	e00d      	b.n	80013b8 <GPIO_voidSetPinValue+0x58>
					GPIOA->BSRR = (1 << Copy_Pin);
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013a6:	619a      	str	r2, [r3, #24]
					break ;
 80013a8:	e006      	b.n	80013b8 <GPIO_voidSetPinValue+0x58>
					GPIOA->BRR = (1 << Copy_Pin);
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	2201      	movs	r2, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 80013b6:	bf00      	nop
			}	
			break ; 
 80013b8:	e039      	b.n	800142e <GPIO_voidSetPinValue+0xce>
		case PORTB :
			switch (Copy_u8Value)
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <GPIO_voidSetPinValue+0x72>
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d000      	beq.n	80013c6 <GPIO_voidSetPinValue+0x66>
				case LOW  :	
					GPIOB->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 80013c4:	e00b      	b.n	80013de <GPIO_voidSetPinValue+0x7e>
					GPIOB->BSRR = (1 << Copy_Pin);
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	2201      	movs	r2, #1
 80013ca:	409a      	lsls	r2, r3
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <GPIO_voidSetPinValue+0xdc>)
 80013ce:	619a      	str	r2, [r3, #24]
					break ;
 80013d0:	e005      	b.n	80013de <GPIO_voidSetPinValue+0x7e>
					GPIOB->BRR = (1 << Copy_Pin);
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	2201      	movs	r2, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <GPIO_voidSetPinValue+0xdc>)
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 80013dc:	bf00      	nop
			}			
			break ;
 80013de:	e026      	b.n	800142e <GPIO_voidSetPinValue+0xce>
		case PORTC	:
			switch (Copy_u8Value)
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <GPIO_voidSetPinValue+0x98>
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d000      	beq.n	80013ec <GPIO_voidSetPinValue+0x8c>
				case LOW  :	
					GPIOC->BRR = (1 << Copy_Pin);
					break ;
				default :
					/*error */ 
					break ; 
 80013ea:	e00b      	b.n	8001404 <GPIO_voidSetPinValue+0xa4>
					GPIOC->BSRR = (1 << Copy_Pin);
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2201      	movs	r2, #1
 80013f0:	409a      	lsls	r2, r3
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <GPIO_voidSetPinValue+0xe0>)
 80013f4:	619a      	str	r2, [r3, #24]
					break ;
 80013f6:	e005      	b.n	8001404 <GPIO_voidSetPinValue+0xa4>
					GPIOC->BRR = (1 << Copy_Pin);
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	2201      	movs	r2, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <GPIO_voidSetPinValue+0xe0>)
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
					break ;
 8001402:	bf00      	nop
			}	
			break ;
 8001404:	e013      	b.n	800142e <GPIO_voidSetPinValue+0xce>
			case PORTD	:
				switch (Copy_u8Value)
 8001406:	797b      	ldrb	r3, [r7, #5]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <GPIO_voidSetPinValue+0xbe>
 800140c:	2b01      	cmp	r3, #1
 800140e:	d000      	beq.n	8001412 <GPIO_voidSetPinValue+0xb2>
					case LOW  :
						GPIOD->BRR = (1 << Copy_Pin);
						break ;
					default :
						/*error */
						break ;
 8001410:	e00b      	b.n	800142a <GPIO_voidSetPinValue+0xca>
						GPIOD->BSRR = (1 << Copy_Pin);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2201      	movs	r2, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <GPIO_voidSetPinValue+0xe4>)
 800141a:	619a      	str	r2, [r3, #24]
						break ;
 800141c:	e005      	b.n	800142a <GPIO_voidSetPinValue+0xca>
						GPIOD->BRR = (1 << Copy_Pin);
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	2201      	movs	r2, #1
 8001422:	409a      	lsls	r2, r3
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <GPIO_voidSetPinValue+0xe4>)
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
						break ;
 8001428:	bf00      	nop
				}
				break ;
 800142a:	e000      	b.n	800142e <GPIO_voidSetPinValue+0xce>
		default :
		//error
			break ;
 800142c:	bf00      	nop
	}

}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00

08001448 <GPIO_voidSetAFIO>:
	}
	return LOC_u8Result ;
}

void GPIO_voidSetAFIO(u8 Copy_u8Port, Pin_t Copy_Pin ,AFR_t AFRy)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	460b      	mov	r3, r1
 8001454:	71bb      	strb	r3, [r7, #6]
 8001456:	4613      	mov	r3, r2
 8001458:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	3b11      	subs	r3, #17
 800145e:	2b03      	cmp	r3, #3
 8001460:	f200 808c 	bhi.w	800157c <GPIO_voidSetAFIO+0x134>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <GPIO_voidSetAFIO+0x24>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	0800147d 	.word	0x0800147d
 8001470:	080014c3 	.word	0x080014c3
 8001474:	08001501 	.word	0x08001501
 8001478:	0800153f 	.word	0x0800153f
	{
		case PORTA :
			if(Copy_Pin <= PIN7)
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	2b07      	cmp	r3, #7
 8001480:	d80d      	bhi.n	800149e <GPIO_voidSetAFIO+0x56>
			{
				/* 			RESET		*/
				GPIOA->AFRL |= (AFRy << Copy_Pin*4) ;
 8001482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	7979      	ldrb	r1, [r7, #5]
 800148a:	79ba      	ldrb	r2, [r7, #6]
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	4611      	mov	r1, r2
 8001494:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001498:	430b      	orrs	r3, r1
 800149a:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 800149c:	e070      	b.n	8001580 <GPIO_voidSetAFIO+0x138>
			else if (Copy_Pin <= PIN15 )
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d86d      	bhi.n	8001580 <GPIO_voidSetAFIO+0x138>
				GPIOA->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 80014a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	7979      	ldrb	r1, [r7, #5]
 80014ac:	79ba      	ldrb	r2, [r7, #6]
 80014ae:	3a08      	subs	r2, #8
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	4611      	mov	r1, r2
 80014b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014bc:	430b      	orrs	r3, r1
 80014be:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 80014c0:	e05e      	b.n	8001580 <GPIO_voidSetAFIO+0x138>
		case PORTB :
			if(Copy_Pin <= PIN7)
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b07      	cmp	r3, #7
 80014c6:	d80b      	bhi.n	80014e0 <GPIO_voidSetAFIO+0x98>
			{
				/* 			RESET		*/
				GPIOB->AFRL |= (AFRy << Copy_Pin*4) ;
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <GPIO_voidSetAFIO+0x154>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	7979      	ldrb	r1, [r7, #5]
 80014ce:	79ba      	ldrb	r2, [r7, #6]
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4a30      	ldr	r2, [pc, #192]	; (800159c <GPIO_voidSetAFIO+0x154>)
 80014da:	430b      	orrs	r3, r1
 80014dc:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 80014de:	e051      	b.n	8001584 <GPIO_voidSetAFIO+0x13c>
			else if (Copy_Pin <= PIN15 )
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d84e      	bhi.n	8001584 <GPIO_voidSetAFIO+0x13c>
				GPIOB->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <GPIO_voidSetAFIO+0x154>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	7979      	ldrb	r1, [r7, #5]
 80014ec:	79ba      	ldrb	r2, [r7, #6]
 80014ee:	3a08      	subs	r2, #8
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <GPIO_voidSetAFIO+0x154>)
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 80014fe:	e041      	b.n	8001584 <GPIO_voidSetAFIO+0x13c>
		case PORTC :
			if(Copy_Pin <= PIN7)
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d80b      	bhi.n	800151e <GPIO_voidSetAFIO+0xd6>
			{
				/* 			RESET		*/
				GPIOC->AFRL |= (AFRy << Copy_Pin*4) ;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <GPIO_voidSetAFIO+0x158>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	7979      	ldrb	r1, [r7, #5]
 800150c:	79ba      	ldrb	r2, [r7, #6]
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <GPIO_voidSetAFIO+0x158>)
 8001518:	430b      	orrs	r3, r1
 800151a:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 800151c:	e034      	b.n	8001588 <GPIO_voidSetAFIO+0x140>
			else if (Copy_Pin <= PIN15 )
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d831      	bhi.n	8001588 <GPIO_voidSetAFIO+0x140>
				GPIOC->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <GPIO_voidSetAFIO+0x158>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	7979      	ldrb	r1, [r7, #5]
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	3a08      	subs	r2, #8
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4611      	mov	r1, r2
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <GPIO_voidSetAFIO+0x158>)
 8001538:	430b      	orrs	r3, r1
 800153a:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 800153c:	e024      	b.n	8001588 <GPIO_voidSetAFIO+0x140>
		case PORTD :
			if(Copy_Pin <= PIN7)
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	2b07      	cmp	r3, #7
 8001542:	d80b      	bhi.n	800155c <GPIO_voidSetAFIO+0x114>
			{
				/* 			RESET		*/
				GPIOD->AFRL |= (AFRy << Copy_Pin*4) ;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <GPIO_voidSetAFIO+0x15c>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	7979      	ldrb	r1, [r7, #5]
 800154a:	79ba      	ldrb	r2, [r7, #6]
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <GPIO_voidSetAFIO+0x15c>)
 8001556:	430b      	orrs	r3, r1
 8001558:	6213      	str	r3, [r2, #32]
			}
			else
			{
				/* error */
			}
			break ;
 800155a:	e017      	b.n	800158c <GPIO_voidSetAFIO+0x144>
			else if (Copy_Pin <= PIN15 )
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	d814      	bhi.n	800158c <GPIO_voidSetAFIO+0x144>
				GPIOD->AFRH |= (AFRy << (Copy_Pin-8)*4) ;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <GPIO_voidSetAFIO+0x15c>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	7979      	ldrb	r1, [r7, #5]
 8001568:	79ba      	ldrb	r2, [r7, #6]
 800156a:	3a08      	subs	r2, #8
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <GPIO_voidSetAFIO+0x15c>)
 8001576:	430b      	orrs	r3, r1
 8001578:	6253      	str	r3, [r2, #36]	; 0x24
			break ;
 800157a:	e007      	b.n	800158c <GPIO_voidSetAFIO+0x144>
		default :
			/* error */
			break ;
 800157c:	bf00      	nop
 800157e:	e006      	b.n	800158e <GPIO_voidSetAFIO+0x146>
			break ;
 8001580:	bf00      	nop
 8001582:	e004      	b.n	800158e <GPIO_voidSetAFIO+0x146>
			break ;
 8001584:	bf00      	nop
 8001586:	e002      	b.n	800158e <GPIO_voidSetAFIO+0x146>
			break ;
 8001588:	bf00      	nop
 800158a:	e000      	b.n	800158e <GPIO_voidSetAFIO+0x146>
			break ;
 800158c:	bf00      	nop
	}}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	48000400 	.word	0x48000400
 80015a0:	48000800 	.word	0x48000800
 80015a4:	48000c00 	.word	0x48000c00

080015a8 <ICU_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void ICU_voidInit(ICU_Config_t * p_userConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    // Checking which Timer Used 
    if(p_userConfig->Timerx == Timer2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f040 8275 	bne.w	8001aa4 <ICU_voidInit+0x4fc>
    {
        // Prescaler 
        TIM2->PSC = p_userConfig->ICU_u16Prescaler ; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	895a      	ldrh	r2, [r3, #10]
 80015be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
        TIM2->ARR = p_userConfig->ICU_Max_Counting ;
 80015c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e252      	b.n	8001a7a <ICU_voidInit+0x4d2>
        {
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	795b      	ldrb	r3, [r3, #5]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <ICU_voidInit+0x46>
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8243 	beq.w	8001a74 <ICU_voidInit+0x4cc>
        {
          if(LOC_u8Counter == 0)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 808d 	bne.w	8001710 <ICU_voidInit+0x168>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 80015f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6193      	str	r3, [r2, #24]
            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d110      	bne.n	8001634 <ICU_voidInit+0x8c>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC1IE) ; 
 8001612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161c:	f023 0302 	bic.w	r3, r3, #2
 8001620:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC1DE) ; 
 8001622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001630:	60d3      	str	r3, [r2, #12]
 8001632:	e026      	b.n	8001682 <ICU_voidInit+0xda>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d110      	bne.n	8001662 <ICU_voidInit+0xba>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC1IE) ; 
 8001640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC1DE) ; 
 8001650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800165e:	60d3      	str	r3, [r2, #12]
 8001660:	e00f      	b.n	8001682 <ICU_voidInit+0xda>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC1IE) ; 
 8001662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC1DE) ; 
 8001672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001680:	60d3      	str	r3, [r2, #12]
            }

            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	795b      	ldrb	r3, [r3, #5]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d110      	bne.n	80016b0 <ICU_voidInit+0x108>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC1NP);
 800168e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001698:	f023 0308 	bic.w	r3, r3, #8
 800169c:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC1P);
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a8:	f023 0302 	bic.w	r3, r3, #2
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	e026      	b.n	80016fe <ICU_voidInit+0x156>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	795b      	ldrb	r3, [r3, #5]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d110      	bne.n	80016de <ICU_voidInit+0x136>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC1NP);
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c6:	f023 0308 	bic.w	r3, r3, #8
 80016ca:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC1P);
 80016cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e00f      	b.n	80016fe <ICU_voidInit+0x156>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC1NP);
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC1P);
 80016ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC1E); 
 80016fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	e1b1      	b.n	8001a74 <ICU_voidInit+0x4cc>
          }
          else if (LOC_u8Counter == 1)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b01      	cmp	r3, #1
 8001714:	f040 808d 	bne.w	8001832 <ICU_voidInit+0x28a>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR1 |= (0b01<<8) ;                  //CC2 channel is configured as input, IC1 is mapped on TI1
 8001718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6193      	str	r3, [r2, #24]
            
            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d110      	bne.n	8001756 <ICU_voidInit+0x1ae>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC2IE) ; 
 8001734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC2DE) ; 
 8001744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001752:	60d3      	str	r3, [r2, #12]
 8001754:	e026      	b.n	80017a4 <ICU_voidInit+0x1fc>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d110      	bne.n	8001784 <ICU_voidInit+0x1dc>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC2IE) ; 
 8001762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC2DE) ; 
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001780:	60d3      	str	r3, [r2, #12]
 8001782:	e00f      	b.n	80017a4 <ICU_voidInit+0x1fc>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC2IE) ; 
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC2DE) ; 
 8001794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a2:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	795b      	ldrb	r3, [r3, #5]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d110      	bne.n	80017d2 <ICU_voidInit+0x22a>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC2NP);
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017be:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC2P);
 80017c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ca:	f023 0320 	bic.w	r3, r3, #32
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e026      	b.n	8001820 <ICU_voidInit+0x278>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	795b      	ldrb	r3, [r3, #5]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d110      	bne.n	8001800 <ICU_voidInit+0x258>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC2NP);
 80017de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ec:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC2P);
 80017ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	e00f      	b.n	8001820 <ICU_voidInit+0x278>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC2NP);
 8001800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180e:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC2P);
 8001810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC2E);            
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e120      	b.n	8001a74 <ICU_voidInit+0x4cc>

          }
          else if (LOC_u8Counter == 2)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 808d 	bne.w	8001954 <ICU_voidInit+0x3ac>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR2 |= (0b01<<0) ;                  //CC3 channel is configured as input, IC1 is mapped on TI1
 800183a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61d3      	str	r3, [r2, #28]

            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d110      	bne.n	8001878 <ICU_voidInit+0x2d0>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC3IE) ; 
 8001856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001860:	f023 0308 	bic.w	r3, r3, #8
 8001864:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC3DE) ; 
 8001866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001874:	60d3      	str	r3, [r2, #12]
 8001876:	e026      	b.n	80018c6 <ICU_voidInit+0x31e>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d110      	bne.n	80018a6 <ICU_voidInit+0x2fe>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC3IE) ; 
 8001884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC3DE) ; 
 8001894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018a2:	60d3      	str	r3, [r2, #12]
 80018a4:	e00f      	b.n	80018c6 <ICU_voidInit+0x31e>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC3IE) ; 
 80018a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b0:	f023 0308 	bic.w	r3, r3, #8
 80018b4:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC3DE) ; 
 80018b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c4:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	795b      	ldrb	r3, [r3, #5]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d110      	bne.n	80018f4 <ICU_voidInit+0x34c>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC3NP);
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018e0:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC3P);
 80018e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e026      	b.n	8001942 <ICU_voidInit+0x39a>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	795b      	ldrb	r3, [r3, #5]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d110      	bne.n	8001922 <ICU_voidInit+0x37a>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC3NP);
 8001900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800190e:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC3P);
 8001910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e00f      	b.n	8001942 <ICU_voidInit+0x39a>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC3NP);
 8001922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001930:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC3P);
 8001932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001940:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC3E); 
 8001942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	e08f      	b.n	8001a74 <ICU_voidInit+0x4cc>
          }
          else if (LOC_u8Counter == 3)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b03      	cmp	r3, #3
 8001958:	f040 808c 	bne.w	8001a74 <ICU_voidInit+0x4cc>
          {
            /**************************************  Channel Mapping to T1  *************************************/
            TIM2->CCMR2 |= (0b01<<8) ;                  //CC4 channel is configured as input, IC1 is mapped on TI1
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	61d3      	str	r3, [r2, #28]

            /*************************************** Select Mechanism   ******************************************/
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d110      	bne.n	800199a <ICU_voidInit+0x3f2>
            {
                // Polling
                TIM2->DIER &= ~(1<< DIER_CC4IE) ; 
 8001978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001982:	f023 0310 	bic.w	r3, r3, #16
 8001986:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC4DE) ; 
 8001988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001996:	60d3      	str	r3, [r2, #12]
 8001998:	e026      	b.n	80019e8 <ICU_voidInit+0x440>
            }
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d110      	bne.n	80019c8 <ICU_voidInit+0x420>
            {
                // IRQ
                TIM2->DIER |= (1<< DIER_CC4IE) ; 
 80019a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b0:	f043 0310 	orr.w	r3, r3, #16
 80019b4:	60d3      	str	r3, [r2, #12]
                TIM2->DIER &= ~(1<< DIER_CC4DE) ; 
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c4:	60d3      	str	r3, [r2, #12]
 80019c6:	e00f      	b.n	80019e8 <ICU_voidInit+0x440>
            }
            else 
            {
                // DMA
                TIM2->DIER &= ~(1<< DIER_CC4IE) ; 
 80019c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	f023 0310 	bic.w	r3, r3, #16
 80019d6:	60d3      	str	r3, [r2, #12]
                TIM2->DIER |=  (1<< DIER_CC4DE) ; 
 80019d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e6:	60d3      	str	r3, [r2, #12]
            }
            /*************************************** Select Edge   ******************************************/
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	795b      	ldrb	r3, [r3, #5]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d110      	bne.n	8001a16 <ICU_voidInit+0x46e>
            {
                // Rising   CC1NP/CC1P 0b00
                TIM2->CCER &= ~(1<<CCER_CC4NP);
 80019f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a02:	6213      	str	r3, [r2, #32]
                TIM2->CCER &= ~(1<<CCER_CC4P);
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e026      	b.n	8001a64 <ICU_voidInit+0x4bc>
            }
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	795b      	ldrb	r3, [r3, #5]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d110      	bne.n	8001a44 <ICU_voidInit+0x49c>
            {
                // Falling  0b01
                TIM2->CCER &= ~(1<<CCER_CC4NP);
 8001a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a30:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC4P);
 8001a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	e00f      	b.n	8001a64 <ICU_voidInit+0x4bc>
            }
            else 
            {
                // Both Edges 0b11
                TIM2->CCER |=  (1<<CCER_CC4NP);
 8001a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	6213      	str	r3, [r2, #32]
                TIM2->CCER |=  (1<<CCER_CC4P);
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a62:	6213      	str	r3, [r2, #32]
            }
            /************************************ Channel Enable    ********************************************/
            TIM2->CCER |= (1<< CCER_CC4E); 
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a72:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3301      	adds	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	f67f ada9 	bls.w	80015d4 <ICU_voidInit+0x2c>

          }
        }
      }  
    TIM2->SR |= (1<<0);
 8001a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6113      	str	r3, [r2, #16]
    // Enable Timer 
    TIM2->CR1 |= (1<< CR1_CEN);        
 8001a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
      }  
    TIM17->SR |= (1<<0);
    // Enable Timer 
    TIM17->CR1 |= (1<< CR1_CEN);        
    }  
}
 8001aa2:	e148      	b.n	8001d36 <ICU_voidInit+0x78e>
    else if(p_userConfig->Timerx == Timer4)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	f040 809e 	bne.w	8001bea <ICU_voidInit+0x642>
        TIM4->PSC = p_userConfig->ICU_u16Prescaler ; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	895a      	ldrh	r2, [r3, #10]
 8001ab2:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
        TIM4->ARR = p_userConfig->ICU_Max_Counting ;
 8001ab6:	4a8b      	ldr	r2, [pc, #556]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73bb      	strb	r3, [r7, #14]
 8001ac2:	e081      	b.n	8001bc8 <ICU_voidInit+0x620>
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	795b      	ldrb	r3, [r3, #5]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <ICU_voidInit+0x534>
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	785b      	ldrb	r3, [r3, #1]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d072      	beq.n	8001bc2 <ICU_voidInit+0x61a>
          if(LOC_u8Counter == 0)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d16f      	bne.n	8001bc2 <ICU_voidInit+0x61a>
            TIM4->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6193      	str	r3, [r2, #24]
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d10c      	bne.n	8001b14 <ICU_voidInit+0x56c>
                TIM4->DIER &= ~(1<< DIER_CC1IE) ; 
 8001afa:	4b7a      	ldr	r3, [pc, #488]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a79      	ldr	r2, [pc, #484]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b00:	f023 0302 	bic.w	r3, r3, #2
 8001b04:	60d3      	str	r3, [r2, #12]
                TIM4->DIER &= ~(1<< DIER_CC1DE) ; 
 8001b06:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	4a76      	ldr	r2, [pc, #472]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b10:	60d3      	str	r3, [r2, #12]
 8001b12:	e01e      	b.n	8001b52 <ICU_voidInit+0x5aa>
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d10c      	bne.n	8001b3a <ICU_voidInit+0x592>
                TIM4->DIER |= (1<< DIER_CC1IE) ; 
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a6f      	ldr	r2, [pc, #444]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	60d3      	str	r3, [r2, #12]
                TIM4->DIER &= ~(1<< DIER_CC1DE) ; 
 8001b2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a6c      	ldr	r2, [pc, #432]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b36:	60d3      	str	r3, [r2, #12]
 8001b38:	e00b      	b.n	8001b52 <ICU_voidInit+0x5aa>
                TIM4->DIER &= ~(1<< DIER_CC1IE) ; 
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a69      	ldr	r2, [pc, #420]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b40:	f023 0302 	bic.w	r3, r3, #2
 8001b44:	60d3      	str	r3, [r2, #12]
                TIM4->DIER |=  (1<< DIER_CC1DE) ; 
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b50:	60d3      	str	r3, [r2, #12]
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	795b      	ldrb	r3, [r3, #5]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10c      	bne.n	8001b78 <ICU_voidInit+0x5d0>
                TIM4->CCER &= ~(1<<CCER_CC1NP);
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a60      	ldr	r2, [pc, #384]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b64:	f023 0308 	bic.w	r3, r3, #8
 8001b68:	6213      	str	r3, [r2, #32]
                TIM4->CCER &= ~(1<<CCER_CC1P);
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b70:	f023 0302 	bic.w	r3, r3, #2
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	e01e      	b.n	8001bb6 <ICU_voidInit+0x60e>
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001b78:	7bbb      	ldrb	r3, [r7, #14]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	795b      	ldrb	r3, [r3, #5]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d10c      	bne.n	8001b9e <ICU_voidInit+0x5f6>
                TIM4->CCER &= ~(1<<CCER_CC1NP);
 8001b84:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b8a:	f023 0308 	bic.w	r3, r3, #8
 8001b8e:	6213      	str	r3, [r2, #32]
                TIM4->CCER |=  (1<<CCER_CC1P);
 8001b90:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e00b      	b.n	8001bb6 <ICU_voidInit+0x60e>
                TIM4->CCER |=  (1<<CCER_CC1NP);
 8001b9e:	4b51      	ldr	r3, [pc, #324]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6213      	str	r3, [r2, #32]
                TIM4->CCER |=  (1<<CCER_CC1P);
 8001baa:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6213      	str	r3, [r2, #32]
            TIM4->CCER |= (1<< CCER_CC1E); 
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	73bb      	strb	r3, [r7, #14]
 8001bc8:	7bbb      	ldrb	r3, [r7, #14]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	f67f af7a 	bls.w	8001ac4 <ICU_voidInit+0x51c>
    TIM4->SR |= (1<<0);
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4a43      	ldr	r2, [pc, #268]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6113      	str	r3, [r2, #16]
    TIM4->CR1 |= (1<< CR1_CEN);        
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a40      	ldr	r2, [pc, #256]	; (8001ce4 <ICU_voidInit+0x73c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	e0a5      	b.n	8001d36 <ICU_voidInit+0x78e>
    else if(p_userConfig->Timerx == Timer17)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	f040 80a1 	bne.w	8001d36 <ICU_voidInit+0x78e>
        TIM17->PSC = p_userConfig->ICU_u16Prescaler ; 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	895a      	ldrh	r2, [r3, #10]
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <ICU_voidInit+0x740>)
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
        TIM17->ARR = p_userConfig->ICU_Max_Counting ;
 8001bfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <ICU_voidInit+0x740>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	62d3      	str	r3, [r2, #44]	; 0x2c
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	737b      	strb	r3, [r7, #13]
 8001c08:	e085      	b.n	8001d16 <ICU_voidInit+0x76e>
        if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] != ICU_NOT_USED || p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] != ICU_NOT_USED)
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	795b      	ldrb	r3, [r3, #5]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <ICU_voidInit+0x67a>
 8001c16:	7b7b      	ldrb	r3, [r7, #13]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d076      	beq.n	8001d10 <ICU_voidInit+0x768>
          if(LOC_u8Counter == 0)
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d173      	bne.n	8001d10 <ICU_voidInit+0x768>
            TIM17->CCMR1 |= (0b01<<0) ;                  //CC1 channel is configured as input, IC1 is mapped on TI1
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6193      	str	r3, [r2, #24]
            if(p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_POLLING)
 8001c34:	7b7b      	ldrb	r3, [r7, #13]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d10c      	bne.n	8001c5a <ICU_voidInit+0x6b2>
                TIM17->DIER &= ~(1<< DIER_CC1IE) ; 
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c46:	f023 0302 	bic.w	r3, r3, #2
 8001c4a:	60d3      	str	r3, [r2, #12]
                TIM17->DIER &= ~(1<< DIER_CC1DE) ; 
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c56:	60d3      	str	r3, [r2, #12]
 8001c58:	e01e      	b.n	8001c98 <ICU_voidInit+0x6f0>
            else if (p_userConfig->ICU_CHECK_MECHNSIM_x[LOC_u8Counter] == ICU_CHECK_MECHNSIM_IRQs)
 8001c5a:	7b7b      	ldrb	r3, [r7, #13]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d10c      	bne.n	8001c80 <ICU_voidInit+0x6d8>
                TIM17->DIER |= (1<< DIER_CC1IE) ; 
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	60d3      	str	r3, [r2, #12]
                TIM17->DIER &= ~(1<< DIER_CC1DE) ; 
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c7c:	60d3      	str	r3, [r2, #12]
 8001c7e:	e00b      	b.n	8001c98 <ICU_voidInit+0x6f0>
                TIM17->DIER &= ~(1<< DIER_CC1IE) ; 
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c86:	f023 0302 	bic.w	r3, r3, #2
 8001c8a:	60d3      	str	r3, [r2, #12]
                TIM17->DIER |=  (1<< DIER_CC1DE) ; 
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <ICU_voidInit+0x740>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c96:	60d3      	str	r3, [r2, #12]
            if(p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_RISING_EDGE)
 8001c98:	7b7b      	ldrb	r3, [r7, #13]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10c      	bne.n	8001cbe <ICU_voidInit+0x716>
                TIM17->CCER &= ~(1<<CCER_CC1NP);
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <ICU_voidInit+0x740>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <ICU_voidInit+0x740>)
 8001caa:	f023 0308 	bic.w	r3, r3, #8
 8001cae:	6213      	str	r3, [r2, #32]
                TIM17->CCER &= ~(1<<CCER_CC1P);
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <ICU_voidInit+0x740>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <ICU_voidInit+0x740>)
 8001cb6:	f023 0302 	bic.w	r3, r3, #2
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e022      	b.n	8001d04 <ICU_voidInit+0x75c>
            else if (p_userConfig->ICU_CAPTURE_x_EDGE[LOC_u8Counter] == ICU_CAPTURE_FALLING_EDGE)
 8001cbe:	7b7b      	ldrb	r3, [r7, #13]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	795b      	ldrb	r3, [r3, #5]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d110      	bne.n	8001cec <ICU_voidInit+0x744>
                TIM17->CCER &= ~(1<<CCER_CC1NP);
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <ICU_voidInit+0x740>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <ICU_voidInit+0x740>)
 8001cd0:	f023 0308 	bic.w	r3, r3, #8
 8001cd4:	6213      	str	r3, [r2, #32]
                TIM17->CCER |=  (1<<CCER_CC1P);
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <ICU_voidInit+0x740>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <ICU_voidInit+0x740>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	e00f      	b.n	8001d04 <ICU_voidInit+0x75c>
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40014800 	.word	0x40014800
                TIM17->CCER |=  (1<<CCER_CC1NP);
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <ICU_voidInit+0x79c>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <ICU_voidInit+0x79c>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6213      	str	r3, [r2, #32]
                TIM17->CCER |=  (1<<CCER_CC1P);
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <ICU_voidInit+0x79c>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <ICU_voidInit+0x79c>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	6213      	str	r3, [r2, #32]
            TIM17->CCER |= (1<< CCER_CC1E); 
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
        for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 8001d10:	7b7b      	ldrb	r3, [r7, #13]
 8001d12:	3301      	adds	r3, #1
 8001d14:	737b      	strb	r3, [r7, #13]
 8001d16:	7b7b      	ldrb	r3, [r7, #13]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	f67f af76 	bls.w	8001c0a <ICU_voidInit+0x662>
    TIM17->SR |= (1<<0);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6113      	str	r3, [r2, #16]
    TIM17->CR1 |= (1<< CR1_CEN);        
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <ICU_voidInit+0x79c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40014800 	.word	0x40014800

08001d48 <ICU_voidGetCapturedValueSynch>:

ICU_Error_t ICU_voidGetCapturedValueSynch(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x , u32 *ptr_u32CapturedValue)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	460b      	mov	r3, r1
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	72fb      	strb	r3, [r7, #11]

#define FLAG_DETECTED (( TIM2->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
#define OVC_DTECTED	(( TIM2->SR & ( 1<< ( CHANNEL_x+9 ) ) ) )
#define PREDEFINED_TIMOUT	480000	// 60 ms
#define CHECK_TIMOUT	(LOC_u32TimeoutCounter > PREDEFINED_TIMOUT)
	ICU_Error_t LOC_eReturnError = ICU_OK ;
 8001d56:	2303      	movs	r3, #3
 8001d58:	75fb      	strb	r3, [r7, #23]
	u8 LOC_u8IsOvercapturedDetected = 0 ;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75bb      	strb	r3, [r7, #22]
	u32 LOC_u32TimeoutCounter = 0 ;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
    // Check Timer
    if(p_userConfig->Timerx == Timer2)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d142      	bne.n	8001df0 <ICU_voidGetCapturedValueSynch+0xa8>
    {
    //		 ( ! ( ( FLAG == 0) || (OVC ==0) ) && !(TIMOUT > PRD)
        while ((! ( FLAG_DETECTED || LOC_u8IsOvercapturedDetected)) && !CHECK_TIMOUT)
 8001d6a:	e00e      	b.n	8001d8a <ICU_voidGetCapturedValueSynch+0x42>
        {
            // Wait for the capture flag to be set
        	LOC_u8IsOvercapturedDetected = OVC_DTECTED ;
 8001d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	3309      	adds	r3, #9
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	75bb      	strb	r3, [r7, #22]
        	LOC_u32TimeoutCounter++;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
        while ((! ( FLAG_DETECTED || LOC_u8IsOvercapturedDetected)) && !CHECK_TIMOUT)
 8001d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	7afa      	ldrb	r2, [r7, #11]
 8001d92:	3201      	adds	r2, #1
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <ICU_voidGetCapturedValueSynch+0x66>
 8001da0:	7dbb      	ldrb	r3, [r7, #22]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <ICU_voidGetCapturedValueSynch+0x66>
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <ICU_voidGetCapturedValueSynch+0x114>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d9de      	bls.n	8001d6c <ICU_voidGetCapturedValueSynch+0x24>
        }
        if(LOC_u8IsOvercapturedDetected == 0 && !CHECK_TIMOUT)
 8001dae:	7dbb      	ldrb	r3, [r7, #22]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <ICU_voidGetCapturedValueSynch+0x88>
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <ICU_voidGetCapturedValueSynch+0x114>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d809      	bhi.n	8001dd0 <ICU_voidGetCapturedValueSynch+0x88>
        {
            *ptr_u32CapturedValue = TIM2->CCRx[CHANNEL_x]    ;
 8001dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	330c      	adds	r3, #12
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e03e      	b.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
        }
        else
        {
        	if(LOC_u8IsOvercapturedDetected == 1)
 8001dd0:	7dbb      	ldrb	r3, [r7, #22]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <ICU_voidGetCapturedValueSynch+0x94>
        		LOC_eReturnError = ICU_OVER_CAPTURED ;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
 8001dda:	e038      	b.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
        	else if (CHECK_TIMOUT)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <ICU_voidGetCapturedValueSynch+0x114>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d902      	bls.n	8001dea <ICU_voidGetCapturedValueSynch+0xa2>
        	{
        		LOC_eReturnError = ICU_TIME_OUT ;
 8001de4:	2301      	movs	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
 8001de8:	e031      	b.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
        	}
        	else
        	{
        		LOC_eReturnError = ICU_UNKOWN_ERR ;
 8001dea:	2302      	movs	r3, #2
 8001dec:	75fb      	strb	r3, [r7, #23]
 8001dee:	e02e      	b.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
        	}
        }
    }
    else if(p_userConfig->Timerx == Timer4)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d113      	bne.n	8001e20 <ICU_voidGetCapturedValueSynch+0xd8>
    {
        while (! ( TIM4->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
 8001df8:	bf00      	nop
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <ICU_voidGetCapturedValueSynch+0x118>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	7afa      	ldrb	r2, [r7, #11]
 8001e00:	3201      	adds	r2, #1
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f5      	beq.n	8001dfa <ICU_voidGetCapturedValueSynch+0xb2>
        {
            // Wait for the capture flag to be set
        }
        *ptr_u32CapturedValue = TIM4->CCRx[CHANNEL_x]    ;
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <ICU_voidGetCapturedValueSynch+0x118>)
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	330c      	adds	r3, #12
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e016      	b.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
    }
    else if(p_userConfig->Timerx == Timer17)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	d112      	bne.n	8001e4e <ICU_voidGetCapturedValueSynch+0x106>
    {
        while (! ( TIM17->SR & ( 1<< ( CHANNEL_x+1 ) ) ) )
 8001e28:	bf00      	nop
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <ICU_voidGetCapturedValueSynch+0x11c>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	7afa      	ldrb	r2, [r7, #11]
 8001e30:	3201      	adds	r2, #1
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f5      	beq.n	8001e2a <ICU_voidGetCapturedValueSynch+0xe2>
        {
            // Wait for the capture flag to be set
        }
        *ptr_u32CapturedValue = TIM17->CCRx[CHANNEL_x]    ;
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <ICU_voidGetCapturedValueSynch+0x11c>)
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	330c      	adds	r3, #12
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
    }
    return LOC_eReturnError ;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	00075300 	.word	0x00075300
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40014800 	.word	0x40014800

08001e68 <ICU_voidGetCapturedValueAsynch>:

void ICU_voidGetCapturedValueAsynch(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x , void (*pCallback)(u32 CurrentCounts) )
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	460b      	mov	r3, r1
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	72fb      	strb	r3, [r7, #11]
    // Check Timer
    if(p_userConfig->Timerx == Timer2)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <ICU_voidGetCapturedValueAsynch+0x22>
    {
    	GlobalP2F_TIM2[CHANNEL_x] = pCallback ;
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <ICU_voidGetCapturedValueAsynch+0x54>)
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    else if(p_userConfig->Timerx == Timer17)
    {
    	GlobalP2F_TIM17[CHANNEL_x] = pCallback ;
    }
}
 8001e88:	e012      	b.n	8001eb0 <ICU_voidGetCapturedValueAsynch+0x48>
    else if(p_userConfig->Timerx == Timer4)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d105      	bne.n	8001e9e <ICU_voidGetCapturedValueAsynch+0x36>
    	GlobalP2F_TIM4[CHANNEL_x] = pCallback ;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <ICU_voidGetCapturedValueAsynch+0x58>)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e9c:	e008      	b.n	8001eb0 <ICU_voidGetCapturedValueAsynch+0x48>
    else if(p_userConfig->Timerx == Timer17)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d104      	bne.n	8001eb0 <ICU_voidGetCapturedValueAsynch+0x48>
    	GlobalP2F_TIM17[CHANNEL_x] = pCallback ;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	4906      	ldr	r1, [pc, #24]	; (8001ec4 <ICU_voidGetCapturedValueAsynch+0x5c>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	200000d0 	.word	0x200000d0
 8001ec0:	200000c0 	.word	0x200000c0
 8001ec4:	200000b0 	.word	0x200000b0

08001ec8 <ICU_voidDisableChannelIRQ>:

    }
}

void ICU_voidDisableChannelIRQ(ICU_Config_t * p_userConfig , Channel_ID_t CHANNEL_x )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
    if(p_userConfig->Timerx == Timer2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d12f      	bne.n	8001f3c <ICU_voidDisableChannelIRQ+0x74>
    {
  	  if (CHANNEL_x == 0)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <ICU_voidDisableChannelIRQ+0x2c>
  	  {
          TIM2->DIER &= ~(1<< DIER_CC1IE) ;
 8001ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eec:	f023 0302 	bic.w	r3, r3, #2
 8001ef0:	60d3      	str	r3, [r2, #12]
	  else
	  {

	  }
    }
}
 8001ef2:	e07a      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <ICU_voidDisableChannelIRQ+0x44>
          TIM2->DIER &= ~(1<< DIER_CC2IE) ;
 8001efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	60d3      	str	r3, [r2, #12]
}
 8001f0a:	e06e      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d108      	bne.n	8001f24 <ICU_voidDisableChannelIRQ+0x5c>
          TIM2->DIER &= ~(1<< DIER_CC3IE) ;
 8001f12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1c:	f023 0308 	bic.w	r3, r3, #8
 8001f20:	60d3      	str	r3, [r2, #12]
}
 8001f22:	e062      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d15f      	bne.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
          TIM2->DIER &= ~(1<< DIER_CC4IE) ;
 8001f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f34:	f023 0310 	bic.w	r3, r3, #16
 8001f38:	60d3      	str	r3, [r2, #12]
}
 8001f3a:	e056      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
    else if(p_userConfig->Timerx == Timer4)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d127      	bne.n	8001f94 <ICU_voidDisableChannelIRQ+0xcc>
  	  if (CHANNEL_x == 0)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <ICU_voidDisableChannelIRQ+0x90>
          TIM4->DIER &= ~(1<< DIER_CC1IE) ;
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f50:	f023 0302 	bic.w	r3, r3, #2
 8001f54:	60d3      	str	r3, [r2, #12]
}
 8001f56:	e048      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d106      	bne.n	8001f6c <ICU_voidDisableChannelIRQ+0xa4>
          TIM4->DIER &= ~(1<< DIER_CC2IE) ;
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	60d3      	str	r3, [r2, #12]
}
 8001f6a:	e03e      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d106      	bne.n	8001f80 <ICU_voidDisableChannelIRQ+0xb8>
          TIM4->DIER &= ~(1<< DIER_CC3IE) ;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f78:	f023 0308 	bic.w	r3, r3, #8
 8001f7c:	60d3      	str	r3, [r2, #12]
}
 8001f7e:	e034      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d131      	bne.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
          TIM4->DIER &= ~(1<< DIER_CC4IE) ;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <ICU_voidDisableChannelIRQ+0x130>)
 8001f8c:	f023 0310 	bic.w	r3, r3, #16
 8001f90:	60d3      	str	r3, [r2, #12]
}
 8001f92:	e02a      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
    else if(p_userConfig->Timerx == Timer17)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d126      	bne.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
  	  if (CHANNEL_x == 0)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <ICU_voidDisableChannelIRQ+0xe8>
          TIM17->DIER &= ~(1<< DIER_CC1IE) ;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fa8:	f023 0302 	bic.w	r3, r3, #2
 8001fac:	60d3      	str	r3, [r2, #12]
}
 8001fae:	e01c      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 1)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d106      	bne.n	8001fc4 <ICU_voidDisableChannelIRQ+0xfc>
          TIM17->DIER &= ~(1<< DIER_CC2IE) ;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	60d3      	str	r3, [r2, #12]
}
 8001fc2:	e012      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 2)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d106      	bne.n	8001fd8 <ICU_voidDisableChannelIRQ+0x110>
          TIM17->DIER &= ~(1<< DIER_CC3IE) ;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fd0:	f023 0308 	bic.w	r3, r3, #8
 8001fd4:	60d3      	str	r3, [r2, #12]
}
 8001fd6:	e008      	b.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
	  else if (CHANNEL_x == 3)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d105      	bne.n	8001fea <ICU_voidDisableChannelIRQ+0x122>
          TIM17->DIER &= ~(1<< DIER_CC4IE) ;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <ICU_voidDisableChannelIRQ+0x134>)
 8001fe4:	f023 0310 	bic.w	r3, r3, #16
 8001fe8:	60d3      	str	r3, [r2, #12]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40014800 	.word	0x40014800

08002000 <ICU_voidResetTimer>:
	  }

    }
}
void ICU_voidResetTimer(ICU_Config_t * p_userConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    if(p_userConfig->Timerx == Timer2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d104      	bne.n	800201a <ICU_voidResetTimer+0x1a>
    {
        TIM2->CNT  = 0 ;
 8002010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    }
    else if(p_userConfig->Timerx == Timer17)
    {
        TIM17->CNT  = 0 ;
    }
}
 8002018:	e00e      	b.n	8002038 <ICU_voidResetTimer+0x38>
    else if(p_userConfig->Timerx == Timer4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d103      	bne.n	800202a <ICU_voidResetTimer+0x2a>
        TIM4->CNT  = 0 ;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <ICU_voidResetTimer+0x44>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002028:	e006      	b.n	8002038 <ICU_voidResetTimer+0x38>
    else if(p_userConfig->Timerx == Timer17)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d102      	bne.n	8002038 <ICU_voidResetTimer+0x38>
        TIM17->CNT  = 0 ;
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <ICU_voidResetTimer+0x48>)
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40000800 	.word	0x40000800
 8002048:	40014800 	.word	0x40014800

0800204c <TIM2_IRQHandler>:
/************************************* IRQs ******************************************/

void TIM2_IRQHandler (void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	u32 ChannelReading = 0 ;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
	// Check Channel
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_3+1 ) ) ) )
 8002056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <TIM2_IRQHandler+0x30>
    {
    	if(GlobalP2F_TIM2[CHANNEL_3] != NULL)
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <TIM2_IRQHandler+0xac>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <TIM2_IRQHandler+0x30>
    	{
    		ChannelReading = TIM2->CCRx[CHANNEL_3] ;
 800206c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	607b      	str	r3, [r7, #4]
    		GlobalP2F_TIM2[CHANNEL_3](ChannelReading) ;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <TIM2_IRQHandler+0xac>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
    	}

    }
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_1+1 ) ) ) )
 800207c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <TIM2_IRQHandler+0x56>
	{
		// CH1
    	if(GlobalP2F_TIM2[CHANNEL_1] != NULL)
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <TIM2_IRQHandler+0xac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <TIM2_IRQHandler+0x56>
    	{
			ChannelReading = TIM2->CCRx[CHANNEL_1] ;
 8002092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_1](ChannelReading) ;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <TIM2_IRQHandler+0xac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
    	}
	}
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_2+1 ) ) ) )
 80020a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <TIM2_IRQHandler+0x7c>
	{
		if(GlobalP2F_TIM2[CHANNEL_2] != NULL)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <TIM2_IRQHandler+0xac>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <TIM2_IRQHandler+0x7c>
		{
			ChannelReading = TIM2->CCRx[CHANNEL_2] ;
 80020b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_2](ChannelReading) ;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <TIM2_IRQHandler+0xac>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
		}
	}
    if ( ( TIM2->SR & ( 1<< ( CHANNEL_4+1 ) ) ) )
 80020c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <TIM2_IRQHandler+0xa2>
	{
    	if(GlobalP2F_TIM2[CHANNEL_4] != NULL)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <TIM2_IRQHandler+0xac>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <TIM2_IRQHandler+0xa2>
    	{
			ChannelReading = TIM2->CCRx[CHANNEL_4] ;
 80020de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	607b      	str	r3, [r7, #4]
			GlobalP2F_TIM2[CHANNEL_4](ChannelReading) ;
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <TIM2_IRQHandler+0xac>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
    	}
	}
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000d0 	.word	0x200000d0

080020fc <TIM4_IRQHandler>:

void TIM4_IRQHandler (void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	u32 ChannelReading = 0 ;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
	// Check Channel
    if ( ( TIM4->SR & ( 1<< ( CHANNEL_1+1 ) ) ) )
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <TIM4_IRQHandler+0x34>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <TIM4_IRQHandler+0x2c>
    {
    	if(GlobalP2F_TIM4[CHANNEL_1] != NULL)
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <TIM4_IRQHandler+0x38>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <TIM4_IRQHandler+0x2c>
    	{
    		ChannelReading = TIM4->CCRx[CHANNEL_1] ;
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <TIM4_IRQHandler+0x34>)
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	607b      	str	r3, [r7, #4]
    		GlobalP2F_TIM4[CHANNEL_1](ChannelReading) ;
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <TIM4_IRQHandler+0x38>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
    	}

    }

}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40000800 	.word	0x40000800
 8002134:	200000c0 	.word	0x200000c0

08002138 <nvic_enableInterrupt>:
#include "nvic_reg.h"
#include "std_types.h"
#include "bit_math.h"

void nvic_enableInterrupt(u8 intId)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	if (intId>=0 && intId<32)
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b1f      	cmp	r3, #31
 8002146:	d805      	bhi.n	8002154 <nvic_enableInterrupt+0x1c>
	{
		NVIC_ISER0_REG = (1<<intId);
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2201      	movs	r2, #1
 800214c:	409a      	lsls	r2, r3
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <nvic_enableInterrupt+0x40>)
 8002150:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
}
 8002152:	e00b      	b.n	800216c <nvic_enableInterrupt+0x34>
	else if (intId>=32 && intId<64)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b1f      	cmp	r3, #31
 8002158:	d908      	bls.n	800216c <nvic_enableInterrupt+0x34>
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b3f      	cmp	r3, #63	; 0x3f
 800215e:	d805      	bhi.n	800216c <nvic_enableInterrupt+0x34>
		NVIC_ISER1_REG = (1<<(intId-32));
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b20      	subs	r3, #32
 8002164:	2201      	movs	r2, #1
 8002166:	409a      	lsls	r2, r3
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <nvic_enableInterrupt+0x44>)
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000e104 	.word	0xe000e104

08002180 <PWM_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void PWM_voidInit(PWM_Config_t * p_userConfig)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

    if(p_userConfig->Timerx == Timer3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	f040 80b4 	bne.w	80022fa <PWM_voidInit+0x17a>
    {
      // Reset Usage Regs 
      TIM3->CCMR1 = 0x0000 ;
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <PWM_voidInit+0x188>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
      TIM3->CCMR2 = 0x0000 ;
 8002198:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <PWM_voidInit+0x188>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
      TIM3->CR1 = 0x0000 ;
 800219e:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <PWM_voidInit+0x188>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
      TIM3->CR2 = 0x0000 ;
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <PWM_voidInit+0x188>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
      TIM3->SMCR = 0x0000 ;
 80021aa:	4b57      	ldr	r3, [pc, #348]	; (8002308 <PWM_voidInit+0x188>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
      TIM3->DIER = 0x0000 ;
 80021b0:	4b55      	ldr	r3, [pc, #340]	; (8002308 <PWM_voidInit+0x188>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
      
      // Clock Selection : Internal Clock Source 
      TIM3->SMCR  &= ~(0b111 << SMCR_SMS) ;
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <PWM_voidInit+0x188>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a53      	ldr	r2, [pc, #332]	; (8002308 <PWM_voidInit+0x188>)
 80021bc:	f023 0307 	bic.w	r3, r3, #7
 80021c0:	6093      	str	r3, [r2, #8]

      // Counting DIR      
      TIM3->CR1 &= ~(1<<4) ; // DIR BIT : 4
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <PWM_voidInit+0x188>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a50      	ldr	r2, [pc, #320]	; (8002308 <PWM_voidInit+0x188>)
 80021c8:	f023 0310 	bic.w	r3, r3, #16
 80021cc:	6013      	str	r3, [r2, #0]
      TIM3->CR1 |= (p_userConfig->DIR_xCOUNTING) ;
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <PWM_voidInit+0x188>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	7852      	ldrb	r2, [r2, #1]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <PWM_voidInit+0x188>)
 80021da:	430b      	orrs	r3, r1
 80021dc:	6013      	str	r3, [r2, #0]

      // Configure the prescaler 
      //   clock frequency = fCK_PSC / (PSC[15:0] + 1)
      TIM3->PSC  = 0 ;
 80021de:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <PWM_voidInit+0x188>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

      // TOP Value 
      TIM3->ARR = (u16) p_userConfig->TIMx_u32TopValue ;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <PWM_voidInit+0x188>)
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      // PWM Mode :  writing 110 (PWM mode 1) or ‘111 (PWM mode 2) in the OCxM bits in the TIMx_CCMRx register
      // enable the corresponding preload register by setting the OCxPE bit in the TIMx_CCMRx register
      // Enable capture/compare For Used Channels
      for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e073      	b.n	80022dc <PWM_voidInit+0x15c>
      {
        if(p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] != PWM_NOT_USED)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	7a1b      	ldrb	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06a      	beq.n	80022d6 <PWM_voidInit+0x156>
        {
          if(LOC_u8Counter == 0)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d117      	bne.n	8002236 <PWM_voidInit+0xb6>
          {
              // CCMR1
              TIM3->CCMR1 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR1_OC1M);
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <PWM_voidInit+0x188>)
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	440a      	add	r2, r1
 8002210:	7a12      	ldrb	r2, [r2, #8]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	4611      	mov	r1, r2
 8002216:	4a3c      	ldr	r2, [pc, #240]	; (8002308 <PWM_voidInit+0x188>)
 8002218:	430b      	orrs	r3, r1
 800221a:	6193      	str	r3, [r2, #24]
              // enable the corresponding preload REGISTER
              TIM3->CCMR1 |=  (1 << CCMR1_OC1PE) ;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <PWM_voidInit+0x188>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <PWM_voidInit+0x188>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6193      	str	r3, [r2, #24]
              // Enable capture/compare channel 1 output
              TIM3->CCER |= (1<<CCER_CC1E);
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <PWM_voidInit+0x188>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a36      	ldr	r2, [pc, #216]	; (8002308 <PWM_voidInit+0x188>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e04f      	b.n	80022d6 <PWM_voidInit+0x156>

          }
          else if (LOC_u8Counter == 1)
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d117      	bne.n	800226c <PWM_voidInit+0xec>
          {
              TIM3->CCMR1 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR1_OC2M);
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <PWM_voidInit+0x188>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	440a      	add	r2, r1
 8002246:	7a12      	ldrb	r2, [r2, #8]
 8002248:	0312      	lsls	r2, r2, #12
 800224a:	4611      	mov	r1, r2
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <PWM_voidInit+0x188>)
 800224e:	430b      	orrs	r3, r1
 8002250:	6193      	str	r3, [r2, #24]
              TIM3->CCMR1 |=  (1 << CCMR1_OC2PE) ;
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <PWM_voidInit+0x188>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <PWM_voidInit+0x188>)
 8002258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800225c:	6193      	str	r3, [r2, #24]
              TIM3->CCER |= (1<<CCER_CC2E);
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <PWM_voidInit+0x188>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a29      	ldr	r2, [pc, #164]	; (8002308 <PWM_voidInit+0x188>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	e034      	b.n	80022d6 <PWM_voidInit+0x156>

          }
          else if (LOC_u8Counter == 2)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d117      	bne.n	80022a2 <PWM_voidInit+0x122>
          {
              TIM3->CCMR2 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR2_OC3M);
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <PWM_voidInit+0x188>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	440a      	add	r2, r1
 800227c:	7a12      	ldrb	r2, [r2, #8]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	4611      	mov	r1, r2
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <PWM_voidInit+0x188>)
 8002284:	430b      	orrs	r3, r1
 8002286:	61d3      	str	r3, [r2, #28]
              TIM3->CCMR2 |=  (1 << CCMR2_OC3PE) ;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <PWM_voidInit+0x188>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <PWM_voidInit+0x188>)
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	61d3      	str	r3, [r2, #28]
              TIM3->CCER |= (1<<CCER_CC3E);
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <PWM_voidInit+0x188>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <PWM_voidInit+0x188>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e019      	b.n	80022d6 <PWM_voidInit+0x156>
          }
          else if (LOC_u8Counter == 3)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d116      	bne.n	80022d6 <PWM_voidInit+0x156>
          {
              TIM3->CCMR2 |= (p_userConfig->TIMx_PWM_Mode_CHx[LOC_u8Counter] << CCMR2_OC4M);
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <PWM_voidInit+0x188>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	440a      	add	r2, r1
 80022b2:	7a12      	ldrb	r2, [r2, #8]
 80022b4:	0312      	lsls	r2, r2, #12
 80022b6:	4611      	mov	r1, r2
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <PWM_voidInit+0x188>)
 80022ba:	430b      	orrs	r3, r1
 80022bc:	61d3      	str	r3, [r2, #28]
              TIM3->CCMR2 |=  (1 << CCMR2_OC4PE) ;
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <PWM_voidInit+0x188>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <PWM_voidInit+0x188>)
 80022c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c8:	61d3      	str	r3, [r2, #28]
              TIM3->CCER |= (1<<CCER_CC4E);
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <PWM_voidInit+0x188>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <PWM_voidInit+0x188>)
 80022d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d4:	6213      	str	r3, [r2, #32]
      for (u8 LOC_u8Counter = 0; LOC_u8Counter < 4; LOC_u8Counter++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d988      	bls.n	80021f4 <PWM_voidInit+0x74>

          }
        }
      }  
      // Auto Preload Value
      TIM3->CR1 |= (1<<CR1_ARPE);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <PWM_voidInit+0x188>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <PWM_voidInit+0x188>)
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	6013      	str	r3, [r2, #0]
      // Finally Enable TIM3 
      TIM3->CR1 |= (1<<CR1_CEN);
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <PWM_voidInit+0x188>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <PWM_voidInit+0x188>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
    }

}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40000400 	.word	0x40000400

0800230c <PWM_voidSetDutyCycle>:

void PWM_voidSetDutyCycle(PWM_Config_t * p_userConfig , u16 copy_u16DutyCycle , Channel_ID_t CHANNEL_x)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
    if(p_userConfig->Timerx == Timer3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <PWM_voidSetDutyCycle+0x26>
    {
      TIM3->CCRx[CHANNEL_x] = (0xFFFF &copy_u16DutyCycle) ;
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <PWM_voidSetDutyCycle+0x34>)
 8002326:	787b      	ldrb	r3, [r7, #1]
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	330c      	adds	r3, #12
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	605a      	str	r2, [r3, #4]

    }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40000400 	.word	0x40000400

08002344 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	460a      	mov	r2, r1
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	4613      	mov	r3, r2
 8002352:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	2b1f      	cmp	r3, #31
 8002358:	d828      	bhi.n	80023ac <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d00f      	beq.n	8002380 <RCC_voidEnableClock+0x3c>
 8002360:	2b02      	cmp	r3, #2
 8002362:	d018      	beq.n	8002396 <RCC_voidEnableClock+0x52>
 8002364:	2b00      	cmp	r3, #0
 8002366:	d000      	beq.n	800236a <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8002368:	e020      	b.n	80023ac <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <RCC_voidEnableClock+0x74>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	79ba      	ldrb	r2, [r7, #6]
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4611      	mov	r1, r2
 8002378:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <RCC_voidEnableClock+0x74>)
 800237a:	430b      	orrs	r3, r1
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e015      	b.n	80023ac <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <RCC_voidEnableClock+0x78>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	79ba      	ldrb	r2, [r7, #6]
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4611      	mov	r1, r2
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <RCC_voidEnableClock+0x78>)
 8002390:	430b      	orrs	r3, r1
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e00a      	b.n	80023ac <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <RCC_voidEnableClock+0x7c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	79ba      	ldrb	r2, [r7, #6]
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4611      	mov	r1, r2
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <RCC_voidEnableClock+0x7c>)
 80023a6:	430b      	orrs	r3, r1
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	bf00      	nop
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021014 	.word	0x40021014
 80023bc:	4002101c 	.word	0x4002101c
 80023c0:	40021018 	.word	0x40021018

080023c4 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <RCC_voidInitSysClocks+0x48>)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
		SET_BIT(RCC_CR, RCC_CR_HSEON);
		while(!(CHECK_BIT(RCC_CR, RCC_CR_HSERDY)));   // Wait Until CLK Ready
		RCC_CFGR |= RCC_CFGR_SW_HSE;
	    SET_BIT(RCC_CR, RCC_CR_CSSON);
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	    SET_BIT(RCC_CR, RCC_CR_HSION);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <RCC_voidInitSysClocks+0x48>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0c      	ldr	r2, [pc, #48]	; (800240c <RCC_voidInitSysClocks+0x48>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]
	//	while(!(CHECK_BIT(RCC_CR, RCC_CR_HSIRDY)));   // Wait Until CLK Ready
        RCC_CFGR |= RCC_CFGR_SW_HSI;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023ea:	4a09      	ldr	r2, [pc, #36]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <RCC_voidInitSysClocks+0x4c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40021004 	.word	0x40021004

08002414 <STK_u32ConfigInterval>:
/******************************************************************************
* Private Function Definitions
*******************************************************************************/

u32 STK_u32ConfigInterval(STK_TimeUnit_t timeUnit)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    u32 LOC_u32Clock ;
    // Get STK Clock 
    #if   STK_CLK_SOURCE_SELECTION	 == STK_AHB_OVER_8
    LOC_u32Clock = AHB_CLOCK_FREQ / 8;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <STK_u32ConfigInterval+0x24>)
 800241e:	60fb      	str	r3, [r7, #12]
    LOC_u32Clock = AHB_CLOCK_FREQ;
    #else
	//	#error "Choose Correct Clock Source From Config File"
    #endif
    // Freq of One Tick 
    LOC_u32Clock = LOC_u32Clock / timeUnit ;
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	60fb      	str	r3, [r7, #12]
    // Return Time Of One Tick
    return LOC_u32Clock ;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	000f4240 	.word	0x000f4240

0800243c <STK_voidInit>:
/******************************************************************************
* Public Function Definitions
*******************************************************************************/

void STK_voidInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    STK->CTRL  = 0;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <STK_voidInit+0x1c>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    STK->CTRL |= STK_CLK_SOURCE_SELECTION;
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <STK_voidInit+0x1c>)
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <STK_voidInit+0x1c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e010 	.word	0xe000e010

0800245c <STK_voidSetBusyWait_MS>:
        STK -> VAL  = 0;
    }
    else{ /* <!TODO> ERROR */ }
}
void STK_voidSetBusyWait_MS(u16 Copy_u16TimeMS)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
    /* GET TICK CONFIG  */
    u16 Local_u16Ticks = STK_u32ConfigInterval(STK_MS);
 8002466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800246a:	f7ff ffd3 	bl	8002414 <STK_u32ConfigInterval>
 800246e:	4603      	mov	r3, r0
 8002470:	81fb      	strh	r3, [r7, #14]
    /*  Clear Val Reg   */
    STK->VAL  = 0;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
    /* Load Load Reg    */
    STK->LOAD = Local_u16Ticks * Copy_u16TimeMS;
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	fb02 f203 	mul.w	r2, r2, r3
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 8002482:	605a      	str	r2, [r3, #4]
    /*  Enable Timer    */
    SET_BIT((STK -> CTRL) , 0);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6013      	str	r3, [r2, #0]
    /*  Wait    */
    while(GET_BIT((STK -> CTRL) , 16 )  == 0 );
 8002490:	bf00      	nop
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f8      	beq.n	8002492 <STK_voidSetBusyWait_MS+0x36>
    /* Stop Timer */
    CLEAR_BIT(STK->CTRL, 0);
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]
    /* Clear LOAD and VAL Regs */
    STK -> LOAD = 0;
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
    STK -> VAL  = 0;
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <STK_voidSetBusyWait_MS+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <STK_voidSetBusyWait_US>:
void STK_voidSetBusyWait_US(u16 Copy_u16TimeUS)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
    /* GET TICK CONFIG  */
    u16 Local_u16Ticks = STK_u32ConfigInterval(STK_US);
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <STK_voidSetBusyWait_US+0x64>)
 80024d0:	f7ff ffa0 	bl	8002414 <STK_u32ConfigInterval>
 80024d4:	4603      	mov	r3, r0
 80024d6:	81fb      	strh	r3, [r7, #14]
    /*  Clear Val Reg   */
    STK->VAL  = 0;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    /* Load Load Reg    */
    STK->LOAD = Local_u16Ticks * Copy_u16TimeUS;
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	fb02 f203 	mul.w	r2, r2, r3
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 80024e8:	605a      	str	r2, [r3, #4]
    /*  Enable Timer    */
    SET_BIT((STK -> CTRL) , 0);
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6013      	str	r3, [r2, #0]
    /*  Wait    */
    while(GET_BIT((STK -> CTRL) , 16 )  == 0 );
 80024f6:	bf00      	nop
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f8      	beq.n	80024f8 <STK_voidSetBusyWait_US+0x34>
    /* Stop Timer */
    CLEAR_BIT(STK->CTRL, 0);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6013      	str	r3, [r2, #0]
    /* Clear LOAD and VAL Regs */
    STK -> LOAD = 0;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    STK -> VAL  = 0;
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <STK_voidSetBusyWait_US+0x68>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	000f4240 	.word	0x000f4240
 800252c:	e000e010 	.word	0xe000e010

08002530 <SysTick_Handler>:
	u32 LOC_u32ElapsedTime = 0 ;
    LOC_u32ElapsedTime = ( STK -> VAL ) * STK_u32ConfigInterval(STK_US);
	return LOC_u32ElapsedTime ; 
}
/************************************* IRQ  *************************************************/
void SysTick_Handler(void) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	71fb      	strb	r3, [r7, #7]
	if (STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <SysTick_Handler+0x54>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d111      	bne.n	8002566 <SysTick_Handler+0x36>
	{
		/* Disable STK Interrupt */
		CLEAR_BIT(STK->CTRL, 1);
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <SysTick_Handler+0x58>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <SysTick_Handler+0x58>)
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	6013      	str	r3, [r2, #0]
		/*	Stop Timer	*/
		CLEAR_BIT(STK->CTRL, 0);
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <SysTick_Handler+0x58>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <SysTick_Handler+0x58>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <SysTick_Handler+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
		STK -> VAL  = 0;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <SysTick_Handler+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
	}
	/* Callback notification */
	Glob_STKCallback();
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <SysTick_Handler+0x5c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4798      	blx	r3
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(STK->CTRL,16);
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SysTick_Handler+0x58>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]
	(void)Local_u8Temporary;
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200000e0 	.word	0x200000e0
 8002588:	e000e010 	.word	0xe000e010
 800258c:	2000008c 	.word	0x2000008c

08002590 <APPC1_Init>:
* Function Definitions
*******************************************************************************/


void APPC1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	/**********************************	US	 *************************************/
	Global_UltraSonics.Timerx       = Timer2 ;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <APPC1_Init+0x50>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
	Global_UltraSonics.CHANNEL_x    = CHANNEL_3 ;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <APPC1_Init+0x50>)
 800259c:	2202      	movs	r2, #2
 800259e:	705a      	strb	r2, [r3, #1]
	Global_UltraSonics.Trig_Port[0] = US1_TRIG_PORT ;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <APPC1_Init+0x50>)
 80025a2:	2212      	movs	r2, #18
 80025a4:	709a      	strb	r2, [r3, #2]
	Global_UltraSonics.Trig_Pin[0]  = US1_TRIG_PIN	;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <APPC1_Init+0x50>)
 80025a8:	2206      	movs	r2, #6
 80025aa:	719a      	strb	r2, [r3, #6]
	Global_UltraSonics.Trig_Port[1] = US2_TRIG_PORT    ;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <APPC1_Init+0x50>)
 80025ae:	2211      	movs	r2, #17
 80025b0:	70da      	strb	r2, [r3, #3]
	Global_UltraSonics.Trig_Pin[1]  = US2_TRIG_PIN	;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <APPC1_Init+0x50>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	71da      	strb	r2, [r3, #7]
	Global_UltraSonics.Trig_Port[2] = US3_TRIG_PORT    ;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <APPC1_Init+0x50>)
 80025ba:	2211      	movs	r2, #17
 80025bc:	711a      	strb	r2, [r3, #4]
	Global_UltraSonics.Trig_Pin[2]  = US3_TRIG_PIN	;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <APPC1_Init+0x50>)
 80025c0:	2206      	movs	r2, #6
 80025c2:	721a      	strb	r2, [r3, #8]
    Global_UltraSonics.Trig_Port[3] = US4_TRIG_PORT    ;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <APPC1_Init+0x50>)
 80025c6:	2211      	movs	r2, #17
 80025c8:	715a      	strb	r2, [r3, #5]
	Global_UltraSonics.Trig_Pin[3]  = US4_TRIG_PIN	;
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <APPC1_Init+0x50>)
 80025cc:	2205      	movs	r2, #5
 80025ce:	725a      	strb	r2, [r3, #9]
	Global_UltraSonics.US_x         = US_POLLING;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <APPC1_Init+0x50>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	729a      	strb	r2, [r3, #10]
	US_voidInit(&Global_UltraSonics);
 80025d6:	4802      	ldr	r0, [pc, #8]	; (80025e0 <APPC1_Init+0x50>)
 80025d8:	f7fe fb64 	bl	8000ca4 <US_voidInit>

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000090 	.word	0x20000090

080025e4 <APPC1_SelectUltrasonc>:

US_ERROR_t APPC1_SelectUltrasonc(US_Selection_t copy_UltrasonicNumber , u16 *pData_DistanceInCM)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
	US_ERROR_t LOC_eReturnState = US_INVALID_READING ;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]
    switch (copy_UltrasonicNumber)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d82a      	bhi.n	8002650 <APPC1_SelectUltrasonc+0x6c>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <APPC1_SelectUltrasonc+0x1c>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	08002631 	.word	0x08002631
 8002604:	08002611 	.word	0x08002611
 8002608:	08002641 	.word	0x08002641
 800260c:	08002621 	.word	0x08002621
    {
		case FrontUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , FrontUS);
 8002610:	2201      	movs	r2, #1
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	4811      	ldr	r0, [pc, #68]	; (800265c <APPC1_SelectUltrasonc+0x78>)
 8002616:	f7fe fbc7 	bl	8000da8 <US_voidGetDistanceSynch>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
			break;
 800261e:	e018      	b.n	8002652 <APPC1_SelectUltrasonc+0x6e>
		
		case BackUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , BackUS);
 8002620:	2203      	movs	r2, #3
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	480d      	ldr	r0, [pc, #52]	; (800265c <APPC1_SelectUltrasonc+0x78>)
 8002626:	f7fe fbbf 	bl	8000da8 <US_voidGetDistanceSynch>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]
			break;
 800262e:	e010      	b.n	8002652 <APPC1_SelectUltrasonc+0x6e>
		case FrontRightUS :
			LOC_eReturnState = US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , FrontRightUS);
 8002630:	2200      	movs	r2, #0
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <APPC1_SelectUltrasonc+0x78>)
 8002636:	f7fe fbb7 	bl	8000da8 <US_voidGetDistanceSynch>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]
			break;
 800263e:	e008      	b.n	8002652 <APPC1_SelectUltrasonc+0x6e>
		case RearRightUS :
			LOC_eReturnState =US_voidGetDistanceSynch(&Global_UltraSonics , pData_DistanceInCM , RearRightUS);
 8002640:	2202      	movs	r2, #2
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <APPC1_SelectUltrasonc+0x78>)
 8002646:	f7fe fbaf 	bl	8000da8 <US_voidGetDistanceSynch>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
			break;
 800264e:	e000      	b.n	8002652 <APPC1_SelectUltrasonc+0x6e>
		default :
			/*Do Nothing*/
			break;
 8002650:	bf00      	nop
    }
    return LOC_eReturnState ;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000090 	.word	0x20000090

08002660 <C4_StaticGetFourDistance>:

	return LOC_eReturnState;
}

ERROR_t C4_StaticGetFourDistance(u16 *FD , u16 *BD , u16 *FRD , u16 *BRD)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
    US_ERROR_t LOC_xErrorTracing = 0 ;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    ERROR_t LOC_xReturnError = E_OK ;
 8002672:	2306      	movs	r3, #6
 8002674:	757b      	strb	r3, [r7, #21]
    u8 LOC_u8ErrorCounter = 0 ;
 8002676:	2300      	movs	r3, #0
 8002678:	75bb      	strb	r3, [r7, #22]
    if(FD != NULL )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <C4_StaticGetFourDistance+0x58>
    {
        // Front Distance
        LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontUS,FD);
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff ffae 	bl	80025e4 <APPC1_SelectUltrasonc>
 8002688:	4603      	mov	r3, r0
 800268a:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 800268c:	e00f      	b.n	80026ae <C4_StaticGetFourDistance+0x4e>
        {
            LOC_u8ErrorCounter++ ;
 800268e:	7dbb      	ldrb	r3, [r7, #22]
 8002690:	3301      	adds	r3, #1
 8002692:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontUS,FD);
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	2001      	movs	r0, #1
 8002698:	f7ff ffa4 	bl	80025e4 <APPC1_SelectUltrasonc>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 80026a0:	7dbb      	ldrb	r3, [r7, #22]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d903      	bls.n	80026ae <C4_StaticGetFourDistance+0x4e>
            {
                LOC_xReturnError = ERR_FRONT_US_FAILED ;
 80026a6:	2300      	movs	r3, #0
 80026a8:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 80026aa:	7d7b      	ldrb	r3, [r7, #21]
 80026ac:	e062      	b.n	8002774 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d1ec      	bne.n	800268e <C4_StaticGetFourDistance+0x2e>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 80026b4:	2300      	movs	r3, #0
 80026b6:	75bb      	strb	r3, [r7, #22]
    }

    if(BD != NULL)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01b      	beq.n	80026f6 <C4_StaticGetFourDistance+0x96>
    {
        // Back
        LOC_xErrorTracing = APPC1_SelectUltrasonc(BackUS,BD);
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	2003      	movs	r0, #3
 80026c2:	f7ff ff8f 	bl	80025e4 <APPC1_SelectUltrasonc>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 80026ca:	e00f      	b.n	80026ec <C4_StaticGetFourDistance+0x8c>
        {
            LOC_u8ErrorCounter++ ;
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	3301      	adds	r3, #1
 80026d0:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(BackUS,BD);
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	2003      	movs	r0, #3
 80026d6:	f7ff ff85 	bl	80025e4 <APPC1_SelectUltrasonc>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 80026de:	7dbb      	ldrb	r3, [r7, #22]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d903      	bls.n	80026ec <C4_StaticGetFourDistance+0x8c>
            {
                LOC_xReturnError = ERR_BACK_US_FAILED ;
 80026e4:	2301      	movs	r3, #1
 80026e6:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 80026e8:	7d7b      	ldrb	r3, [r7, #21]
 80026ea:	e043      	b.n	8002774 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d1ec      	bne.n	80026cc <C4_StaticGetFourDistance+0x6c>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75bb      	strb	r3, [r7, #22]
    }

    if(FRD != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <C4_StaticGetFourDistance+0xd4>
    {
        // Front Right
        LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontRightUS,FRD);
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	2000      	movs	r0, #0
 8002700:	f7ff ff70 	bl	80025e4 <APPC1_SelectUltrasonc>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002708:	e00f      	b.n	800272a <C4_StaticGetFourDistance+0xca>
        {
            LOC_u8ErrorCounter++ ;
 800270a:	7dbb      	ldrb	r3, [r7, #22]
 800270c:	3301      	adds	r3, #1
 800270e:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(FrontRightUS,FRD);
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff ff66 	bl	80025e4 <APPC1_SelectUltrasonc>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 800271c:	7dbb      	ldrb	r3, [r7, #22]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d903      	bls.n	800272a <C4_StaticGetFourDistance+0xca>
            {
                LOC_xReturnError = ERR_FRONT_RIGHT_US_FAILED ;
 8002722:	2302      	movs	r3, #2
 8002724:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002726:	7d7b      	ldrb	r3, [r7, #21]
 8002728:	e024      	b.n	8002774 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d1ec      	bne.n	800270a <C4_StaticGetFourDistance+0xaa>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 8002730:	2300      	movs	r3, #0
 8002732:	75bb      	strb	r3, [r7, #22]
    }

    if(BRD != NULL)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01b      	beq.n	8002772 <C4_StaticGetFourDistance+0x112>
    {
        // Rear Right
    	LOC_xErrorTracing = APPC1_SelectUltrasonc(RearRightUS,BRD);
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	2002      	movs	r0, #2
 800273e:	f7ff ff51 	bl	80025e4 <APPC1_SelectUltrasonc>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]
        while (LOC_xErrorTracing != US_VALID_READING)
 8002746:	e00f      	b.n	8002768 <C4_StaticGetFourDistance+0x108>
        {
            LOC_u8ErrorCounter++ ;
 8002748:	7dbb      	ldrb	r3, [r7, #22]
 800274a:	3301      	adds	r3, #1
 800274c:	75bb      	strb	r3, [r7, #22]
            LOC_xErrorTracing = APPC1_SelectUltrasonc(RearRightUS,BRD);
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	2002      	movs	r0, #2
 8002752:	f7ff ff47 	bl	80025e4 <APPC1_SelectUltrasonc>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
            if(LOC_u8ErrorCounter > C4_MAX_ERROR_LOGGING)
 800275a:	7dbb      	ldrb	r3, [r7, #22]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d903      	bls.n	8002768 <C4_StaticGetFourDistance+0x108>
            {
                LOC_xReturnError = ERR_REAR_RIGHT_US_FAILED ;
 8002760:	2303      	movs	r3, #3
 8002762:	757b      	strb	r3, [r7, #21]
                return LOC_xReturnError ;
 8002764:	7d7b      	ldrb	r3, [r7, #21]
 8002766:	e005      	b.n	8002774 <C4_StaticGetFourDistance+0x114>
        while (LOC_xErrorTracing != US_VALID_READING)
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d1ec      	bne.n	8002748 <C4_StaticGetFourDistance+0xe8>
            }
        }
        LOC_u8ErrorCounter = 0 ;
 800276e:	2300      	movs	r3, #0
 8002770:	75bb      	strb	r3, [r7, #22]
    }
    return LOC_xReturnError;
 8002772:	7d7b      	ldrb	r3, [r7, #21]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <C2VCONTROL_voidInit>:

/******************************************************************************
 * Function Definitions
 *******************************************************************************/
void C2VCONTROL_voidInit(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	//_Global_Back_Motor
	_Global_Back_Motor.Timerx      = Timer3 ;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
	_Global_Back_Motor.CHANNEL_x   = CHANNEL_1 ;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
	_Global_Back_Motor.CW_Port     = C2_MOT1_CW_PORT ;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 800278e:	2212      	movs	r2, #18
 8002790:	709a      	strb	r2, [r3, #2]
	_Global_Back_Motor.CW_Pin      = C2_MOT1_CW_PIN  ;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 8002794:	220d      	movs	r2, #13
 8002796:	70da      	strb	r2, [r3, #3]
	_Global_Back_Motor.CCW_Port    = C2_MOT1_CCW_PORT ;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 800279a:	2212      	movs	r2, #18
 800279c:	711a      	strb	r2, [r3, #4]
	_Global_Back_Motor.CCW_Pin     = C2_MOT1_CCW_PIN  ;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 80027a0:	220e      	movs	r2, #14
 80027a2:	715a      	strb	r2, [r3, #5]

	//_Global_Front_Motor
	_Global_Front_Motor.Timerx      = Timer3 ;
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
	_Global_Front_Motor.CHANNEL_x   = CHANNEL_2 ;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	705a      	strb	r2, [r3, #1]
	_Global_Front_Motor.CW_Port     = C2_MOT2_CW_PORT ;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027b2:	2212      	movs	r2, #18
 80027b4:	709a      	strb	r2, [r3, #2]
	_Global_Front_Motor.CW_Pin      = C2_MOT2_CW_PIN  ;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027b8:	220f      	movs	r2, #15
 80027ba:	70da      	strb	r2, [r3, #3]
	_Global_Front_Motor.CCW_Port    = C2_MOT2_CCW_PORT ;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027be:	2212      	movs	r2, #18
 80027c0:	711a      	strb	r2, [r3, #4]
	_Global_Front_Motor.CCW_Pin     = C2_MOT2_CCW_PIN  ;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	715a      	strb	r2, [r3, #5]

	// Inits
	DCMOTOR_voidInit(&_Global_Back_Motor); 	 // For Right Motor
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <C2VCONTROL_voidInit+0x5c>)
 80027ca:	f7fe f8f3 	bl	80009b4 <DCMOTOR_voidInit>
	DCMOTOR_voidInit(&_Global_Front_Motor);  // For Left Motor
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <C2VCONTROL_voidInit+0x60>)
 80027d0:	f7fe f8f0 	bl	80009b4 <DCMOTOR_voidInit>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200000a0 	.word	0x200000a0
 80027dc:	200000a8 	.word	0x200000a8

080027e0 <C2VCONTROL_voidChangeDirection>:

void C2VCONTROL_voidChangeDirection(VCLE_Dir_t VCLE_x , u16 copy_u16VcleSpeed)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	460a      	mov	r2, r1
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	4613      	mov	r3, r2
 80027ee:	80bb      	strh	r3, [r7, #4]
	switch (VCLE_x)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d87d      	bhi.n	80028f2 <C2VCONTROL_voidChangeDirection+0x112>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <C2VCONTROL_voidChangeDirection+0x1c>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	080028e1 	.word	0x080028e1
 8002800:	08002819 	.word	0x08002819
 8002804:	08002835 	.word	0x08002835
 8002808:	08002851 	.word	0x08002851
 800280c:	08002875 	.word	0x08002875
 8002810:	08002899 	.word	0x08002899
 8002814:	080028bd 	.word	0x080028bd
	{
	case VCLE_FWD:
		/* code */
		//FRONT MOTOR
		// DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, MOTOR_ZERO_SPEED);    // Already Stopped
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_STOP);
 8002818:	2100      	movs	r1, #0
 800281a:	4838      	ldr	r0, [pc, #224]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 800281c:	f7fe f944 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 8002820:	2101      	movs	r1, #1
 8002822:	4837      	ldr	r0, [pc, #220]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 8002824:	f7fe f940 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002828:	88bb      	ldrh	r3, [r7, #4]
 800282a:	4619      	mov	r1, r3
 800282c:	4834      	ldr	r0, [pc, #208]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 800282e:	f7fe f985 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 8002832:	e05f      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>

	case VCLE_BWD:
		/* code */
		//FRONT MOTOR
		// DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, MOTOR_ZERO_SPEED);	// Already Stopped
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_STOP);
 8002834:	2100      	movs	r1, #0
 8002836:	4831      	ldr	r0, [pc, #196]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 8002838:	f7fe f936 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 800283c:	2102      	movs	r1, #2
 800283e:	4830      	ldr	r0, [pc, #192]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 8002840:	f7fe f932 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	4619      	mov	r1, r3
 8002848:	482d      	ldr	r0, [pc, #180]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 800284a:	f7fe f977 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 800284e:	e051      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>


	case VCLE_RIGHT_FWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CW);
 8002850:	2101      	movs	r1, #1
 8002852:	482a      	ldr	r0, [pc, #168]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 8002854:	f7fe f928 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 8002858:	21ff      	movs	r1, #255	; 0xff
 800285a:	4828      	ldr	r0, [pc, #160]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 800285c:	f7fe f96e 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 8002860:	2101      	movs	r1, #1
 8002862:	4827      	ldr	r0, [pc, #156]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 8002864:	f7fe f920 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 8002868:	88bb      	ldrh	r3, [r7, #4]
 800286a:	4619      	mov	r1, r3
 800286c:	4824      	ldr	r0, [pc, #144]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 800286e:	f7fe f965 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 8002872:	e03f      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>

	case VCLE_RIGHT_BWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CW);
 8002874:	2101      	movs	r1, #1
 8002876:	4821      	ldr	r0, [pc, #132]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 8002878:	f7fe f916 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 800287c:	21ff      	movs	r1, #255	; 0xff
 800287e:	481f      	ldr	r0, [pc, #124]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 8002880:	f7fe f95c 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 8002884:	2102      	movs	r1, #2
 8002886:	481e      	ldr	r0, [pc, #120]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 8002888:	f7fe f90e 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 800288c:	88bb      	ldrh	r3, [r7, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	481b      	ldr	r0, [pc, #108]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 8002892:	f7fe f953 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 8002896:	e02d      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>

	case VCLE_LEFT_BWD:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CCW);
 8002898:	2102      	movs	r1, #2
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 800289c:	f7fe f904 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 80028a0:	21ff      	movs	r1, #255	; 0xff
 80028a2:	4816      	ldr	r0, [pc, #88]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 80028a4:	f7fe f94a 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CW);
 80028a8:	2101      	movs	r1, #1
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 80028ac:	f7fe f8fc 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 80028b0:	88bb      	ldrh	r3, [r7, #4]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4812      	ldr	r0, [pc, #72]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 80028b6:	f7fe f941 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 80028ba:	e01b      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>

	case  VCLE_LEFT_FWD :
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Front_Motor, MTR_ROTATE_CCW);
 80028bc:	2102      	movs	r1, #2
 80028be:	480f      	ldr	r0, [pc, #60]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 80028c0:	f7fe f8f2 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, FRONT_MOTOR_SPEED);
 80028c4:	21ff      	movs	r1, #255	; 0xff
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 80028c8:	f7fe f938 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetDirection(& 	_Global_Back_Motor, MTR_ROTATE_CCW);
 80028cc:	2102      	movs	r1, #2
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 80028d0:	f7fe f8ea 	bl	8000aa8 <DCMOTOR_voidSetDirection>
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, copy_u16VcleSpeed);
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4809      	ldr	r0, [pc, #36]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 80028da:	f7fe f92f 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 80028de:	e009      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>
	case VCLE_STOP:
		/* code */
		//FRONT MOTOR
		DCMOTOR_voidSetSpeed(& 	_Global_Front_Motor, MOTOR_ZERO_SPEED);
 80028e0:	2100      	movs	r1, #0
 80028e2:	4806      	ldr	r0, [pc, #24]	; (80028fc <C2VCONTROL_voidChangeDirection+0x11c>)
 80028e4:	f7fe f92a 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		//BACK MOTOR
		DCMOTOR_voidSetSpeed(& 	_Global_Back_Motor, MOTOR_ZERO_SPEED);
 80028e8:	2100      	movs	r1, #0
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <C2VCONTROL_voidChangeDirection+0x120>)
 80028ec:	f7fe f926 	bl	8000b3c <DCMOTOR_voidSetSpeed>
		break;
 80028f0:	e000      	b.n	80028f4 <C2VCONTROL_voidChangeDirection+0x114>
	default:
		break;
 80028f2:	bf00      	nop
	}
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200000a8 	.word	0x200000a8
 8002900:	200000a0 	.word	0x200000a0

08002904 <C4SLTFIND_voidInit>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void C4SLTFIND_voidInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <C5VCLEPRK_voidInitParking>:
 * Function Definitions
 *******************************************************************************/


void C5VCLEPRK_voidInitParking(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0

	/*initialize the US sensor select component*/
	APPC1_Init();
 8002916:	f7ff fe3b 	bl	8002590 <APPC1_Init>
	/*initialize motion control component*/
	//C2VCONTROL_voidInit();

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <C5VCLEPRK_voidStartParking3>:
	}
	return LOC_xReturnError;
}

ERROR_t C5VCLEPRK_voidStartParking3(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
	u16 LOC_u16BackDistance ;
	u16 LOC_u16FrontRightDistance ;
	u16 LOC_u16BackRightDistance ;
	u8 LOC_u8AlignmentDiffer ;
	(void)LOC_u8AlignmentDiffer;
	u8 StartParkingPrecedure = 0 ;
 8002924:	2300      	movs	r3, #0
 8002926:	73bb      	strb	r3, [r7, #14]

	// Stop Vehicle
	C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002928:	2100      	movs	r1, #0
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff ff58 	bl	80027e0 <C2VCONTROL_voidChangeDirection>

	// Evaluate First Impression
	LOC_xReturnError = C4_StaticGetFourDistance(&LOC_u16FrontDistance , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	1dba      	adds	r2, r7, #6
 8002934:	f107 0108 	add.w	r1, r7, #8
 8002938:	f107 000a 	add.w	r0, r7, #10
 800293c:	f7ff fe90 	bl	8002660 <C4_StaticGetFourDistance>
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]
	if(LOC_xReturnError != E_OK)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b06      	cmp	r3, #6
 8002948:	d001      	beq.n	800294e <C5VCLEPRK_voidStartParking3+0x30>
		return LOC_xReturnError ;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	e094      	b.n	8002a78 <C5VCLEPRK_voidStartParking3+0x15a>
	LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	461a      	mov	r2, r3
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bfb8      	it	lt
 800295a:	425b      	neglt	r3, r3
 800295c:	737b      	strb	r3, [r7, #13]
//	else
//	{
//		StartParkingPrecedure = 0 ;
//	}

	StartParkingPrecedure = 1 ;
 800295e:	2301      	movs	r3, #1
 8002960:	73bb      	strb	r3, [r7, #14]

	if(StartParkingPrecedure == 1)
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	2b01      	cmp	r3, #1
 8002966:	f040 8086 	bne.w	8002a76 <C5VCLEPRK_voidStartParking3+0x158>
	{
		// First Movement The Vehicle
		C2VCONTROL_voidChangeDirection(  VCLE_LEFT_FWD , PARKING_SPEED);
 800296a:	218c      	movs	r1, #140	; 0x8c
 800296c:	2006      	movs	r0, #6
 800296e:	f7ff ff37 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
		while(LOC_u16BackDistance > (2*BACK_THERSHOLD)  && LOC_u16BackRightDistance > (2*BACK_RIGHT_THERSHOLD))
 8002972:	e00d      	b.n	8002990 <C5VCLEPRK_voidStartParking3+0x72>
		{
			LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	1dba      	adds	r2, r7, #6
 8002978:	f107 0108 	add.w	r1, r7, #8
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fe6f 	bl	8002660 <C4_StaticGetFourDistance>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]
			if(LOC_xReturnError != E_OK)
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d001      	beq.n	8002990 <C5VCLEPRK_voidStartParking3+0x72>
				return LOC_xReturnError ;
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	e073      	b.n	8002a78 <C5VCLEPRK_voidStartParking3+0x15a>
		while(LOC_u16BackDistance > (2*BACK_THERSHOLD)  && LOC_u16BackRightDistance > (2*BACK_RIGHT_THERSHOLD))
 8002990:	893b      	ldrh	r3, [r7, #8]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d902      	bls.n	800299c <C5VCLEPRK_voidStartParking3+0x7e>
 8002996:	88bb      	ldrh	r3, [r7, #4]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d8eb      	bhi.n	8002974 <C5VCLEPRK_voidStartParking3+0x56>

		}
		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 800299c:	2100      	movs	r1, #0
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff ff1e 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
		delay_ms((MOVEMENT_DELAY));
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	f7fe fabf 	bl	8000f2a <delay_ms>

		// Now Vehicle is stops at angle ~45 with slot
		LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	1dba      	adds	r2, r7, #6
 80029b0:	f107 0108 	add.w	r1, r7, #8
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7ff fe53 	bl	8002660 <C4_StaticGetFourDistance>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
		if(LOC_xReturnError != E_OK)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d001      	beq.n	80029c8 <C5VCLEPRK_voidStartParking3+0xaa>
			return LOC_xReturnError ;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	e057      	b.n	8002a78 <C5VCLEPRK_voidStartParking3+0x15a>

		C2VCONTROL_voidChangeDirection(VCLE_RIGHT_BWD  , PARKING_SPEED);
 80029c8:	218c      	movs	r1, #140	; 0x8c
 80029ca:	2004      	movs	r0, #4
 80029cc:	f7ff ff08 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
		while(LOC_u16BackDistance > BACK_THERSHOLD && StartParkingPrecedure != 2)
 80029d0:	e043      	b.n	8002a5a <C5VCLEPRK_voidStartParking3+0x13c>
		{
			// Stop With The Same Angle
			LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	f107 0108 	add.w	r1, r7, #8
 80029da:	2000      	movs	r0, #0
 80029dc:	f7ff fe40 	bl	8002660 <C4_StaticGetFourDistance>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
			if(LOC_xReturnError != E_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d01b      	beq.n	8002a22 <C5VCLEPRK_voidStartParking3+0x104>
				return LOC_xReturnError ;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	e044      	b.n	8002a78 <C5VCLEPRK_voidStartParking3+0x15a>
			// عشان لو لبست
			while (LOC_u16BackDistance >= 1000 || LOC_u16BackRightDistance >= 1000 || LOC_u16FrontRightDistance >= 1000)
			{
				// The vehicle on wall :)
				C2VCONTROL_voidChangeDirection(VCLE_FWD  , PARKING_SPEED);
 80029ee:	218c      	movs	r1, #140	; 0x8c
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7ff fef5 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
				delay_ms((MOVEMENT_DELAY/2));
 80029f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029fa:	f7fe fa96 	bl	8000f2a <delay_ms>
				C2VCONTROL_voidChangeDirection(VCLE_STOP  , PARKING_SPEED);
 80029fe:	218c      	movs	r1, #140	; 0x8c
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff feed 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
				LOC_xReturnError = C4_StaticGetFourDistance(NULL , &LOC_u16BackDistance , &LOC_u16FrontRightDistance , &LOC_u16BackRightDistance);
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	1dba      	adds	r2, r7, #6
 8002a0a:	f107 0108 	add.w	r1, r7, #8
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7ff fe26 	bl	8002660 <C4_StaticGetFourDistance>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
				if(LOC_xReturnError != E_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d001      	beq.n	8002a22 <C5VCLEPRK_voidStartParking3+0x104>
					return LOC_xReturnError ;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	e02a      	b.n	8002a78 <C5VCLEPRK_voidStartParking3+0x15a>
			while (LOC_u16BackDistance >= 1000 || LOC_u16BackRightDistance >= 1000 || LOC_u16FrontRightDistance >= 1000)
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a28:	d2e1      	bcs.n	80029ee <C5VCLEPRK_voidStartParking3+0xd0>
 8002a2a:	88bb      	ldrh	r3, [r7, #4]
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d2dd      	bcs.n	80029ee <C5VCLEPRK_voidStartParking3+0xd0>
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a38:	d2d9      	bcs.n	80029ee <C5VCLEPRK_voidStartParking3+0xd0>
			}
			// Check End Point From Loop
			LOC_u8AlignmentDiffer = _ABS_((LOC_u16FrontRightDistance-LOC_u16BackRightDistance)) ;
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	88bb      	ldrh	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bfb8      	it	lt
 8002a46:	425b      	neglt	r3, r3
 8002a48:	737b      	strb	r3, [r7, #13]
			if(LOC_u8AlignmentDiffer <= 3 && LOC_u16FrontRightDistance < BACK_RIGHT_THERSHOLD )
 8002a4a:	7b7b      	ldrb	r3, [r7, #13]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d804      	bhi.n	8002a5a <C5VCLEPRK_voidStartParking3+0x13c>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d801      	bhi.n	8002a5a <C5VCLEPRK_voidStartParking3+0x13c>
			{
				StartParkingPrecedure = 2 ;
 8002a56:	2302      	movs	r3, #2
 8002a58:	73bb      	strb	r3, [r7, #14]
		while(LOC_u16BackDistance > BACK_THERSHOLD && StartParkingPrecedure != 2)
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d902      	bls.n	8002a66 <C5VCLEPRK_voidStartParking3+0x148>
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d1b5      	bne.n	80029d2 <C5VCLEPRK_voidStartParking3+0xb4>
			}
		}

		C2VCONTROL_voidChangeDirection(VCLE_STOP,0);
 8002a66:	2100      	movs	r1, #0
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff feb9 	bl	80027e0 <C2VCONTROL_voidChangeDirection>
		delay_ms((MOVEMENT_DELAY));
 8002a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a72:	f7fe fa5a 	bl	8000f2a <delay_ms>
//			// Exit Due to Parking Is Complete
//			// Then Go Forward Until Back Distance == Front Distance
//		}
	}

	return LOC_xReturnError;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <DIGMngr_voidInit>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void DIGMngr_voidInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
    // Init Array of Errors 
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <main>:
u32 iSum , jSum, kSum , lsum ;
ERROR_t get_distance(u16* frontDistance , u16* backDistance , u16* frontRightDistance , u16* backRightDistance);


int main(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
     * System Clock : SYSCLK	 = 8 MHz
     * AHB    Clock : HCLK	     = 8 MHz
     * APB1   Clock : APB1CLK    = 8 MHz
     * APB2   Clock : APB2CLK    = 8 MHz
     */
	RCC_voidInitSysClocks();
 8002a96:	f7ff fc95 	bl	80023c4 <RCC_voidInitSysClocks>
	 *  C4_SLOT_FIND		: Used to Find Slot
	 *
	 *  SYS_DIG_Mng			: Used to log Errors
	 *
	 */
	APPC1_Init();
 8002a9a:	f7ff fd79 	bl	8002590 <APPC1_Init>
#if E_MODULE_INIT == 1
	C2VCONTROL_voidInit();
 8002a9e:	f7ff fe6d 	bl	800277c <C2VCONTROL_voidInit>
	C4SLTFIND_voidInit();
 8002aa2:	f7ff ff2f 	bl	8002904 <C4SLTFIND_voidInit>
	DIGMngr_voidInit();
 8002aa6:	f7ff ffeb 	bl	8002a80 <DIGMngr_voidInit>
	C5VCLEPRK_voidInitParking();
 8002aaa:	f7ff ff32 	bl	8002912 <C5VCLEPRK_voidInitParking>
	delay_init();
 8002aae:	f7fe fa29 	bl	8000f04 <delay_init>
#endif


	for(;;)
	{
		US_ERROR_t LOC_eReturnState = US_INVALID_READING ;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	70fb      	strb	r3, [r7, #3]
		arr[RearRightUS][l++] = dataBR;
#endif

#if SCR_3 == 1
		(void)LOC_eReturnState;
		if(C5VCLEPRK_voidStartParking3() == E_OK)
 8002ab6:	f7ff ff32 	bl	800291e <C5VCLEPRK_voidStartParking3>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d100      	bne.n	8002ac2 <main+0x32>
		{
			while(1);
 8002ac0:	e7fe      	b.n	8002ac0 <main+0x30>
		}
#endif

		if(i >= 100 || j >= 100 || k >= 100)
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <main+0x138>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b63      	cmp	r3, #99	; 0x63
 8002ac8:	d807      	bhi.n	8002ada <main+0x4a>
 8002aca:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <main+0x13c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b63      	cmp	r3, #99	; 0x63
 8002ad0:	d803      	bhi.n	8002ada <main+0x4a>
 8002ad2:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <main+0x140>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b63      	cmp	r3, #99	; 0x63
 8002ad8:	d9eb      	bls.n	8002ab2 <main+0x22>
		{
			i = 0 ;
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <main+0x138>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			k = 0 ;
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <main+0x140>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
			j = 0 ;
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <main+0x13c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
			l = 0 ;
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <main+0x144>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
			for(int c = 0 ; c < 100 ; c++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e02e      	b.n	8002b56 <main+0xc6>
			{
				iSum += arr[FrontUS][c] ;
 8002af8:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <main+0x148>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	3364      	adds	r3, #100	; 0x64
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <main+0x14c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <main+0x14c>)
 8002b0c:	6013      	str	r3, [r2, #0]
				jSum += arr[BackUS][c] ;
 8002b0e:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <main+0x148>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <main+0x150>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <main+0x150>)
 8002b24:	6013      	str	r3, [r2, #0]
				kSum += arr[FrontRightUS][c] ;
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <main+0x148>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <main+0x154>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <main+0x154>)
 8002b38:	6013      	str	r3, [r2, #0]
				lsum += arr[RearRightUS][c] ;
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <main+0x148>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	33c8      	adds	r3, #200	; 0xc8
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <main+0x158>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <main+0x158>)
 8002b4e:	6013      	str	r3, [r2, #0]
			for(int c = 0 ; c < 100 ; c++)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b63      	cmp	r3, #99	; 0x63
 8002b5a:	ddcd      	ble.n	8002af8 <main+0x68>
			}
			iAvg = iSum / 100 ;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <main+0x14c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <main+0x15c>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <main+0x160>)
 8002b6c:	701a      	strb	r2, [r3, #0]
			jAvg = jSum / 100 ;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <main+0x150>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <main+0x15c>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <main+0x164>)
 8002b7e:	701a      	strb	r2, [r3, #0]
			kAvg = kSum/100;
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <main+0x154>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <main+0x15c>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <main+0x168>)
 8002b90:	701a      	strb	r2, [r3, #0]
			lAvg = lsum / 100 ;
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <main+0x158>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <main+0x15c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <main+0x16c>)
 8002ba2:	701a      	strb	r2, [r3, #0]
			iSum = 0 ;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <main+0x14c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
			jSum = 0 ;
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <main+0x150>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
			kSum = 0 ;
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <main+0x154>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
			lsum = 0 ;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <main+0x158>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
			if(C5VCLEPRK_voidStartParking3() == E_OK)
 8002bbc:	f7ff feaf 	bl	800291e <C5VCLEPRK_voidStartParking3>
			{
				//while(1);
			}
			lsum = 0 ;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <main+0x158>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
	{
 8002bc6:	e774      	b.n	8002ab2 <main+0x22>
 8002bc8:	20000283 	.word	0x20000283
 8002bcc:	20000278 	.word	0x20000278
 8002bd0:	20000281 	.word	0x20000281
 8002bd4:	20000280 	.word	0x20000280
 8002bd8:	200000e4 	.word	0x200000e4
 8002bdc:	2000027c 	.word	0x2000027c
 8002be0:	20000288 	.word	0x20000288
 8002be4:	20000274 	.word	0x20000274
 8002be8:	20000284 	.word	0x20000284
 8002bec:	51eb851f 	.word	0x51eb851f
 8002bf0:	2000028d 	.word	0x2000028d
 8002bf4:	20000282 	.word	0x20000282
 8002bf8:	2000028c 	.word	0x2000028c
 8002bfc:	2000028e 	.word	0x2000028e

08002c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c02:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c08:	480c      	ldr	r0, [pc, #48]	; (8002c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c0a:	490d      	ldr	r1, [pc, #52]	; (8002c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <LoopForever+0xe>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c20:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <LoopForever+0x16>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c2e:	f000 f811 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7ff ff2d 	bl	8002a90 <main>

08002c36 <LoopForever>:

LoopForever:
    b LoopForever
 8002c36:	e7fe      	b.n	8002c36 <LoopForever>
  ldr   r0, =_estack
 8002c38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c40:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002c44:	08002cbc 	.word	0x08002cbc
  ldr r2, =_sbss
 8002c48:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8002c4c:	20000290 	.word	0x20000290

08002c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC1_2_IRQHandler>
	...

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0d      	ldr	r6, [pc, #52]	; (8002c8c <__libc_init_array+0x38>)
 8002c58:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5a:	1ba4      	subs	r4, r4, r6
 8002c5c:	10a4      	asrs	r4, r4, #2
 8002c5e:	2500      	movs	r5, #0
 8002c60:	42a5      	cmp	r5, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	4e0b      	ldr	r6, [pc, #44]	; (8002c94 <__libc_init_array+0x40>)
 8002c66:	4c0c      	ldr	r4, [pc, #48]	; (8002c98 <__libc_init_array+0x44>)
 8002c68:	f000 f818 	bl	8002c9c <_init>
 8002c6c:	1ba4      	subs	r4, r4, r6
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	2500      	movs	r5, #0
 8002c72:	42a5      	cmp	r5, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c7c:	4798      	blx	r3
 8002c7e:	3501      	adds	r5, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c86:	4798      	blx	r3
 8002c88:	3501      	adds	r5, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002cb4 	.word	0x08002cb4
 8002c90:	08002cb4 	.word	0x08002cb4
 8002c94:	08002cb4 	.word	0x08002cb4
 8002c98:	08002cb8 	.word	0x08002cb8

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

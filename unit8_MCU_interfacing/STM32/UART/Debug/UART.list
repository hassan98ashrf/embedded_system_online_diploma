
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000490  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000490  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c24  00000000  00000000  000104b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000048c  00000000  00000000  000120dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005e0  00000000  00000000  00012569  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000128  00000000  00000000  00012b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00012c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001583  00000000  00000000  00012d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000f4f  00000000  00000000  000142eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009af2  00000000  00000000  0001523a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001ed2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000350  00000000  00000000  0001eda8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000470 	.word	0x08000470

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000470 	.word	0x08000470

08000170 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8000174:	e7fe      	b.n	8000174 <main+0x4>
	...

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800017c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f000 f93f 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f7ff ffe1 	bl	8000170 <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001bc:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 80001c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001c4:	2000005c 	.word	0x2000005c

080001c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC1_2_IRQHandler>
	...

080001cc <EXTI0_IRQHandler>:
//ISR FUNCTIONS
//================================


void EXTI0_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<0;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI0_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI0_IRQHandler+0x1c>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();;
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI0_IRQHandler+0x20>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4798      	blx	r3
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	20000020 	.word	0x20000020

080001f0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<1;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI1_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI1_IRQHandler+0x1c>)
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI1_IRQHandler+0x20>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	4798      	blx	r3
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	20000020 	.word	0x20000020

08000214 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<2;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI2_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI2_IRQHandler+0x1c>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI2_IRQHandler+0x20>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	4798      	blx	r3
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	20000020 	.word	0x20000020

08000238 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<3;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <EXTI3_IRQHandler+0x1c>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <EXTI3_IRQHandler+0x1c>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <EXTI3_IRQHandler+0x20>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4798      	blx	r3
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40010400 	.word	0x40010400
 8000258:	20000020 	.word	0x20000020

0800025c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<4;
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <EXTI4_IRQHandler+0x1c>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <EXTI4_IRQHandler+0x1c>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <EXTI4_IRQHandler+0x20>)
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	4798      	blx	r3
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400
 800027c:	20000020 	.word	0x20000020

08000280 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5	;	GP_IRQ_CallBack[5]();	}
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	2b00      	cmp	r3, #0
 800028e:	d008      	beq.n	80002a2 <EXTI9_5_IRQHandler+0x22>
 8000290:	4b23      	ldr	r3, [pc, #140]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6153      	str	r3, [r2, #20]
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <EXTI9_5_IRQHandler+0xa4>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4798      	blx	r3
	if(EXTI->PR & 1<<6){EXTI->PR |= 1<<6	;	GP_IRQ_CallBack[6]();	}
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d008      	beq.n	80002c0 <EXTI9_5_IRQHandler+0x40>
 80002ae:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <EXTI9_5_IRQHandler+0xa4>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4798      	blx	r3
	if(EXTI->PR & 1<<7){EXTI->PR |= 1<<7	;	GP_IRQ_CallBack[7]();	}
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d008      	beq.n	80002de <EXTI9_5_IRQHandler+0x5e>
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6153      	str	r3, [r2, #20]
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <EXTI9_5_IRQHandler+0xa4>)
 80002da:	69db      	ldr	r3, [r3, #28]
 80002dc:	4798      	blx	r3
	if(EXTI->PR & 1<<8){EXTI->PR |= 1<<8	;	GP_IRQ_CallBack[8]();	}
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d008      	beq.n	80002fc <EXTI9_5_IRQHandler+0x7c>
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <EXTI9_5_IRQHandler+0xa4>)
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	4798      	blx	r3
	if(EXTI->PR & 1<<9){EXTI->PR |= 1<<9	;	GP_IRQ_CallBack[9]();	}
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000304:	2b00      	cmp	r3, #0
 8000306:	d008      	beq.n	800031a <EXTI9_5_IRQHandler+0x9a>
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000312:	6153      	str	r3, [r2, #20]
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <EXTI9_5_IRQHandler+0xa4>)
 8000316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000318:	4798      	blx	r3

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40010400 	.word	0x40010400
 8000324:	20000020 	.word	0x20000020

08000328 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10	;	GP_IRQ_CallBack[10]();	}
 800032c:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000334:	2b00      	cmp	r3, #0
 8000336:	d008      	beq.n	800034a <EXTI15_10_IRQHandler+0x22>
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6153      	str	r3, [r2, #20]
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 8000346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000348:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11	;	GP_IRQ_CallBack[11]();	}
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000352:	2b00      	cmp	r3, #0
 8000354:	d008      	beq.n	8000368 <EXTI15_10_IRQHandler+0x40>
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800035c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12	;	GP_IRQ_CallBack[12]();	}
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000370:	2b00      	cmp	r3, #0
 8000372:	d008      	beq.n	8000386 <EXTI15_10_IRQHandler+0x5e>
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 800037a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037e:	6153      	str	r3, [r2, #20]
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13	;	GP_IRQ_CallBack[13]();	}
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d008      	beq.n	80003a4 <EXTI15_10_IRQHandler+0x7c>
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 8000398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 80003a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a2:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14	;	GP_IRQ_CallBack[14]();	}
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI15_10_IRQHandler+0x9a>
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ba:	6153      	str	r3, [r2, #20]
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 80003be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003c0:	4798      	blx	r3
	if(EXTI->PR & 1<<15){EXTI->PR |= 1<<15	;	GP_IRQ_CallBack[15]();	}
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d008      	beq.n	80003e0 <EXTI15_10_IRQHandler+0xb8>
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <EXTI15_10_IRQHandler+0xc0>)
 80003dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003de:	4798      	blx	r3

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40010400 	.word	0x40010400
 80003e8:	20000020 	.word	0x20000020

080003ec <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 80003f0:	4b02      	ldr	r3, [pc, #8]	; (80003fc <USART1_IRQHandler+0x10>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4798      	blx	r3
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000001c 	.word	0x2000001c

08000400 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <USART2_IRQHandler+0x10>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	4798      	blx	r3
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000001c 	.word	0x2000001c

08000414 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 8000418:	4b02      	ldr	r3, [pc, #8]	; (8000424 <USART3_IRQHandler+0x10>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	4798      	blx	r3
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000001c 	.word	0x2000001c

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	2500      	movs	r5, #0
 800042c:	4e0c      	ldr	r6, [pc, #48]	; (8000460 <__libc_init_array+0x38>)
 800042e:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 8000430:	1ba4      	subs	r4, r4, r6
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	42a5      	cmp	r5, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	f000 f81a 	bl	8000470 <_init>
 800043c:	2500      	movs	r5, #0
 800043e:	4e0a      	ldr	r6, [pc, #40]	; (8000468 <__libc_init_array+0x40>)
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <__libc_init_array+0x44>)
 8000442:	1ba4      	subs	r4, r4, r6
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	42a5      	cmp	r5, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000450:	4798      	blx	r3
 8000452:	3501      	adds	r5, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800045a:	4798      	blx	r3
 800045c:	3501      	adds	r5, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

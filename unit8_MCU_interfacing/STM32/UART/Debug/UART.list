
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a68  08000a68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  4 .ARM          00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a78  08000a80  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a80  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a80  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fdd  00000000  00000000  00010aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009df  00000000  00000000  00014a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a28  00000000  00000000  00015465  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00015e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00016058  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002617  00000000  00000000  000161c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000221c  00000000  00000000  000187df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009cc6  00000000  00000000  0001a9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000246c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  0002473c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a50 	.word	0x08000a50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a50 	.word	0x08000a50

08000170 <clock_init>:
#include "stm32_f103c6_driver_GPIO.h"
#include "stm32_f103c6_driver_USART.h"


void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	AFIO_GPIOE_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
uint32_t ch;


int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
	UART_PinConfig_t UARTCFG;
	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>
	UARTCFG.BaudRate = UART_BaudRate_115200;
 80001ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001b2:	60bb      	str	r3, [r7, #8]
	UARTCFG.HWFlowCtl = UART_HWFlowCtl_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
	UARTCFG.IRQ_Enable = UART_IRQ_Enable_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	743b      	strb	r3, [r7, #16]
	UARTCFG.P_IRQ_CallBack = NULL;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]
	UARTCFG.Parity = UART_Parity_none;
 80001c0:	2300      	movs	r3, #0
 80001c2:	737b      	strb	r3, [r7, #13]
	UARTCFG.Payload_length = UART_Payload_length_8B;
 80001c4:	2300      	movs	r3, #0
 80001c6:	733b      	strb	r3, [r7, #12]
	UARTCFG.StopBits = UART_StopBits_one;
 80001c8:	2300      	movs	r3, #0
 80001ca:	73bb      	strb	r3, [r7, #14]
	UARTCFG.USART_Mode = UART_Mode_TX_RX;
 80001cc:	230c      	movs	r3, #12
 80001ce:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART1, &UARTCFG);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x54>)
 80001d6:	f000 fa89 	bl	80006ec <MCAL_UART_Init>
	MCAL_UART_GPIO_Sett_Pins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fb92 	bl	8000904 <MCAL_UART_GPIO_Sett_Pins>
	while(1)
	{
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fb5f 	bl	80008a8 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &ch, enable);
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fb3e 	bl	8000870 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	20000020 	.word	0x20000020

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fbeb 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	08000a80 	.word	0x08000a80
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	20000060 	.word	0x20000060

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:
//ISR FUNCTIONS
//================================


void EXTI0_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<0;
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000024 	.word	0x20000024

08000278 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<1;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000024 	.word	0x20000024

0800029c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<2;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000024 	.word	0x20000024

080002c0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<3;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000024 	.word	0x20000024

080002e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	//clean by write 1
	EXTI->PR |= 1<<4;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000024 	.word	0x20000024

08000308 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){EXTI->PR |= 1<<5	;	GP_IRQ_CallBack[5]();	}
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI9_5_IRQHandler+0x22>
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<6){EXTI->PR |= 1<<6	;	GP_IRQ_CallBack[6]();	}
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI9_5_IRQHandler+0x40>
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<7){EXTI->PR |= 1<<7	;	GP_IRQ_CallBack[7]();	}
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI9_5_IRQHandler+0x5e>
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<8){EXTI->PR |= 1<<8	;	GP_IRQ_CallBack[8]();	}
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI9_5_IRQHandler+0x7c>
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4798      	blx	r3
	if(EXTI->PR & 1<<9){EXTI->PR |= 1<<9	;	GP_IRQ_CallBack[9]();	}
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x9a>
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4798      	blx	r3

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000024 	.word	0x20000024

080003b0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){EXTI->PR |= 1<<10	;	GP_IRQ_CallBack[10]();	}
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI15_10_IRQHandler+0x22>
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a29      	ldr	r2, [pc, #164]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	4798      	blx	r3
	if(EXTI->PR & 1<<11){EXTI->PR |= 1<<11	;	GP_IRQ_CallBack[11]();	}
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x40>
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	4798      	blx	r3
	if(EXTI->PR & 1<<12){EXTI->PR |= 1<<12	;	GP_IRQ_CallBack[12]();	}
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI15_10_IRQHandler+0x5e>
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4798      	blx	r3
	if(EXTI->PR & 1<<13){EXTI->PR |= 1<<13	;	GP_IRQ_CallBack[13]();	}
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI15_10_IRQHandler+0x7c>
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	4798      	blx	r3
	if(EXTI->PR & 1<<14){EXTI->PR |= 1<<14	;	GP_IRQ_CallBack[14]();	}
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x9a>
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	4798      	blx	r3
	if(EXTI->PR & 1<<15){EXTI->PR |= 1<<15	;	GP_IRQ_CallBack[15]();	}
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0xb8>
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	4798      	blx	r3

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010400 	.word	0x40010400
 8000470:	20000024 	.word	0x20000024

08000474 <Get_CRLH_Position>:
#include "stm32_f103c6_driver_GPIO.h"
#include "stm32_f103c6.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800047e:	88fb      	ldrh	r3, [r7, #6]
 8000480:	2b80      	cmp	r3, #128	; 0x80
 8000482:	d042      	beq.n	800050a <Get_CRLH_Position+0x96>
 8000484:	2b80      	cmp	r3, #128	; 0x80
 8000486:	dc11      	bgt.n	80004ac <Get_CRLH_Position+0x38>
 8000488:	2b08      	cmp	r3, #8
 800048a:	d036      	beq.n	80004fa <Get_CRLH_Position+0x86>
 800048c:	2b08      	cmp	r3, #8
 800048e:	dc06      	bgt.n	800049e <Get_CRLH_Position+0x2a>
 8000490:	2b02      	cmp	r3, #2
 8000492:	d02e      	beq.n	80004f2 <Get_CRLH_Position+0x7e>
 8000494:	2b04      	cmp	r3, #4
 8000496:	d02e      	beq.n	80004f6 <Get_CRLH_Position+0x82>
 8000498:	2b01      	cmp	r3, #1
 800049a:	d028      	beq.n	80004ee <Get_CRLH_Position+0x7a>
 800049c:	e047      	b.n	800052e <Get_CRLH_Position+0xba>
 800049e:	2b20      	cmp	r3, #32
 80004a0:	d02f      	beq.n	8000502 <Get_CRLH_Position+0x8e>
 80004a2:	2b40      	cmp	r3, #64	; 0x40
 80004a4:	d02f      	beq.n	8000506 <Get_CRLH_Position+0x92>
 80004a6:	2b10      	cmp	r3, #16
 80004a8:	d029      	beq.n	80004fe <Get_CRLH_Position+0x8a>
 80004aa:	e040      	b.n	800052e <Get_CRLH_Position+0xba>
 80004ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004b0:	d033      	beq.n	800051a <Get_CRLH_Position+0xa6>
 80004b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004b6:	dc09      	bgt.n	80004cc <Get_CRLH_Position+0x58>
 80004b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004bc:	d029      	beq.n	8000512 <Get_CRLH_Position+0x9e>
 80004be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c2:	d028      	beq.n	8000516 <Get_CRLH_Position+0xa2>
 80004c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c8:	d021      	beq.n	800050e <Get_CRLH_Position+0x9a>
 80004ca:	e030      	b.n	800052e <Get_CRLH_Position+0xba>
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d0:	d027      	beq.n	8000522 <Get_CRLH_Position+0xae>
 80004d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d6:	dc03      	bgt.n	80004e0 <Get_CRLH_Position+0x6c>
 80004d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004dc:	d01f      	beq.n	800051e <Get_CRLH_Position+0xaa>
 80004de:	e026      	b.n	800052e <Get_CRLH_Position+0xba>
 80004e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e4:	d01f      	beq.n	8000526 <Get_CRLH_Position+0xb2>
 80004e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004ea:	d01e      	beq.n	800052a <Get_CRLH_Position+0xb6>
 80004ec:	e01f      	b.n	800052e <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e01e      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80004f2:	2304      	movs	r3, #4
 80004f4:	e01c      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80004f6:	2308      	movs	r3, #8
 80004f8:	e01a      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80004fa:	230c      	movs	r3, #12
 80004fc:	e018      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80004fe:	2310      	movs	r3, #16
 8000500:	e016      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000502:	2314      	movs	r3, #20
 8000504:	e014      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 8000506:	2318      	movs	r3, #24
 8000508:	e012      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800050a:	231c      	movs	r3, #28
 800050c:	e010      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 800050e:	2300      	movs	r3, #0
 8000510:	e00e      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 8000512:	2304      	movs	r3, #4
 8000514:	e00c      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 8000516:	2308      	movs	r3, #8
 8000518:	e00a      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 800051a:	230c      	movs	r3, #12
 800051c:	e008      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 800051e:	2310      	movs	r3, #16
 8000520:	e006      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000522:	2314      	movs	r3, #20
 8000524:	e004      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 8000526:	2318      	movs	r3, #24
 8000528:	e002      	b.n	8000530 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 800052a:	231c      	movs	r3, #28
 800052c:	e000      	b.n	8000530 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 800053a:	b590      	push	{r4, r7, lr}
 800053c:	b085      	sub	sp, #20
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d801      	bhi.n	8000558 <MCAL_GPIO_Init+0x1e>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	e001      	b.n	800055c <MCAL_GPIO_Init+0x22>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff86 	bl	8000474 <Get_CRLH_Position>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	230f      	movs	r3, #15
 800056e:	4093      	lsls	r3, r2
 8000570:	43da      	mvns	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	401a      	ands	r2, r3
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	789b      	ldrb	r3, [r3, #2]
 8000580:	2b07      	cmp	r3, #7
 8000582:	d00b      	beq.n	800059c <MCAL_GPIO_Init+0x62>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d007      	beq.n	800059c <MCAL_GPIO_Init+0x62>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	2b05      	cmp	r3, #5
 8000592:	d003      	beq.n	800059c <MCAL_GPIO_Init+0x62>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d10e      	bne.n	80005ba <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	3b04      	subs	r3, #4
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	78db      	ldrb	r3, [r3, #3]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e02c      	b.n	8000614 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	789b      	ldrb	r3, [r3, #2]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d003      	beq.n	80005ca <MCAL_GPIO_Init+0x90>
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d107      	bne.n	80005da <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e01c      	b.n	8000614 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d102      	bne.n	80005e8 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 80005e2:	2304      	movs	r3, #4
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e015      	b.n	8000614 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 80005e8:	2308      	movs	r3, #8
 80005ea:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d107      	bne.n	8000604 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	e007      	b.n	8000614 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	8812      	ldrh	r2, [r2, #0]
 800060c:	43d2      	mvns	r2, r2
 800060e:	401a      	ands	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000614:	7bfc      	ldrb	r4, [r7, #15]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff2a 	bl	8000474 <Get_CRLH_Position>
 8000620:	4603      	mov	r3, r0
 8000622:	fa04 f203 	lsl.w	r2, r4, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	431a      	orrs	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	601a      	str	r2, [r3, #0]

}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <MCAL_RCC_GetSYS_CLCKFreq>:
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
 */
uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2)&0b11)
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	f003 0303 	and.w	r3, r3, #3
 8000646:	2b01      	cmp	r3, #1
 8000648:	d006      	beq.n	8000658 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d302      	bcc.n	8000654 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800064e:	2b02      	cmp	r3, #2
 8000650:	d004      	beq.n	800065c <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000652:	e005      	b.n	8000660 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0 :
		return HSI_RC_clk;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000656:	e003      	b.n	8000660 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 1 :
		//need to calculate HSE
		return HSE_Clock;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800065a:	e001      	b.n	8000660 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 2 :
		//need to calculate it PLCLK and PLL
		return 16000000;
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800065e:	e7ff      	b.n	8000660 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000
 800066c:	007a1200 	.word	0x007a1200
 8000670:	00f42400 	.word	0x00f42400

08000674 <MCAL_RCC_GetHCKFreq>:
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512
 * */
uint32_t MCAL_RCC_GetHCKFreq(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[(RCC->CFGR >>4)&0b1111]);
 8000678:	f7ff ffde 	bl	8000638 <MCAL_RCC_GetSYS_CLCKFreq>
 800067c:	4601      	mov	r1, r0
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MCAL_RCC_GetHCKFreq+0x20>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <MCAL_RCC_GetHCKFreq+0x24>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	08000a70 	.word	0x08000a70

0800069c <MCAL_RCC_GetPLCK1Freq>:
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16*/
uint32_t MCAL_RCC_GetPLCK1Freq(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCKFreq() >> APBPrescTable[(RCC->CFGR >>8)&0b111]);
 80006a0:	f7ff ffe8 	bl	8000674 <MCAL_RCC_GetHCKFreq>
 80006a4:	4601      	mov	r1, r0
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <MCAL_RCC_GetPLCK1Freq+0x20>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	f003 0307 	and.w	r3, r3, #7
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <MCAL_RCC_GetPLCK1Freq+0x24>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	08000a68 	.word	0x08000a68

080006c4 <MCAL_RCC_GetPLCK2Freq>:
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16
 * */
uint32_t MCAL_RCC_GetPLCK2Freq(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCKFreq() >> APBPrescTable[(RCC->CFGR >>11)&0b111]);
 80006c8:	f7ff ffd4 	bl	8000674 <MCAL_RCC_GetHCKFreq>
 80006cc:	4601      	mov	r1, r0
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MCAL_RCC_GetPLCK2Freq+0x20>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	0adb      	lsrs	r3, r3, #11
 80006d4:	f003 0307 	and.w	r3, r3, #7
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <MCAL_RCC_GetPLCK2Freq+0x24>)
 80006da:	5cd3      	ldrb	r3, [r2, r3]
 80006dc:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006e0:	4618      	mov	r0, r3
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	08000a68 	.word	0x08000a68

080006ec <MCAL_UART_Init>:
 * @retval 			-none
 * Note				- none
 */

void MCAL_UART_Init(USART_TypeDef * USARTx , UART_PinConfig_t* UART_Config)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	G_UART_config = UART_Config;
 80006f6:	4a57      	ldr	r2, [pc, #348]	; (8000854 <MCAL_UART_Init+0x168>)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	6013      	str	r3, [r2, #0]
	uint32_t pclk, BRR;


	//enable the clk for given USART periphirals
	if(USARTx == USART1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a56      	ldr	r2, [pc, #344]	; (8000858 <MCAL_UART_Init+0x16c>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000704:	4b55      	ldr	r3, [pc, #340]	; (800085c <MCAL_UART_Init+0x170>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a54      	ldr	r2, [pc, #336]	; (800085c <MCAL_UART_Init+0x170>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	e014      	b.n	800073c <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a52      	ldr	r2, [pc, #328]	; (8000860 <MCAL_UART_Init+0x174>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <MCAL_UART_Init+0x170>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <MCAL_UART_Init+0x170>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	e009      	b.n	800073c <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a4e      	ldr	r2, [pc, #312]	; (8000864 <MCAL_UART_Init+0x178>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d105      	bne.n	800073c <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <MCAL_UART_Init+0x170>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4a49      	ldr	r2, [pc, #292]	; (800085c <MCAL_UART_Init+0x170>)
 8000736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800073a:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	// Bit 13 UE :USART enable
	USARTx ->CR1 |= 1<<13;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	60da      	str	r2, [r3, #12]

	//Enable USART TX/RX
	// Bit 3 TE & RE enable
	USARTx ->CR1 |= UART_Config->USART_Mode;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60da      	str	r2, [r3, #12]

	//PAYload width
	//USARTx -> CR1 bi12 M
	USARTx ->CR1 |= UART_Config->Payload_length;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	7a12      	ldrb	r2, [r2, #8]
 800075e:	431a      	orrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	60da      	str	r2, [r3, #12]

	//config paritty
	//USARTx -> CR1 bit 12 PCE bit9 PS
	USARTx ->CR1 |= UART_Config->Parity;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	7a52      	ldrb	r2, [r2, #9]
 800076c:	431a      	orrs	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60da      	str	r2, [r3, #12]

	//stop bits
	USARTx ->CR2 |= UART_Config->StopBits;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	7a92      	ldrb	r2, [r2, #10]
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	611a      	str	r2, [r3, #16]

	//flow conttrol
	USARTx ->CR3 |= UART_Config->HWFlowCtl;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	7ad2      	ldrb	r2, [r2, #11]
 8000788:	431a      	orrs	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	615a      	str	r2, [r3, #20]


	// boaud rate register
	//PCLK1 for uart 2,3
	//PCLK2 for uart 1
	if(USARTx == USART1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <MCAL_UART_Init+0x16c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d103      	bne.n	800079e <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPLCK2Freq();
 8000796:	f7ff ff95 	bl	80006c4 <MCAL_RCC_GetPLCK2Freq>
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	e002      	b.n	80007a4 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPLCK1Freq();
 800079e:	f7ff ff7d 	bl	800069c <MCAL_RCC_GetPLCK1Freq>
 80007a2:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_Register(pclk , UART_Config->BaudRate);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b0:	0119      	lsls	r1, r3, #4
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	009a      	lsls	r2, r3, #2
 80007bc:	441a      	add	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	fb00 f303 	mul.w	r3, r0, r3
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <MCAL_UART_Init+0x17c>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	430b      	orrs	r3, r1
 80007ec:	60bb      	str	r3, [r7, #8]

	USARTx->BRR =BRR;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	609a      	str	r2, [r3, #8]

	//enable / disable IRQ
	//USART CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d026      	beq.n	800084a <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	7b12      	ldrb	r2, [r2, #12]
 8000804:	431a      	orrs	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60da      	str	r2, [r3, #12]

		if(USARTx == USART1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MCAL_UART_Init+0x16c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MCAL_UART_Init+0x180>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MCAL_UART_Init+0x180>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	6013      	str	r3, [r2, #0]

		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;

	}
}
 800081e:	e014      	b.n	800084a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <MCAL_UART_Init+0x174>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MCAL_UART_Init+0x180>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MCAL_UART_Init+0x180>)
 800082e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	e009      	b.n	800084a <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <MCAL_UART_Init+0x178>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d105      	bne.n	800084a <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MCAL_UART_Init+0x180>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <MCAL_UART_Init+0x180>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6013      	str	r3, [r2, #0]
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000001c 	.word	0x2000001c
 8000858:	40013800 	.word	0x40013800
 800085c:	40021000 	.word	0x40021000
 8000860:	40004400 	.word	0x40004400
 8000864:	40004800 	.word	0x40004800
 8000868:	51eb851f 	.word	0x51eb851f
 800086c:	e000e104 	.word	0xe000e104

08000870 <MCAL_UART_SendData>:
 * @param [in] 		-PollingEN en/disable polling
 * @retval 			-none
 * Note				- none
 */
void MCAL_UART_SendData(USART_TypeDef * USARTx , uint16_t* P_TXBuffer , enum Polling_Mechanism PollingEN )
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	71fb      	strb	r3, [r7, #7]
	//wait until TXE flag is set in the SR
	if(PollingEN == enable)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d106      	bne.n	8000892 <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 8000884:	bf00      	nop
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f9      	beq.n	8000886 <MCAL_UART_SendData+0x16>
	{
		USARTx->DR = (*P_TXBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*P_TXBuffer & (uint8_t)0xFF);
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	605a      	str	r2, [r3, #4]
	}
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <MCAL_UART_ReceiveData>:
 * @param [in] 		-PollingEN en/disable polling
 * @retval 			-none
 * Note				- none
 */
void MCAL_UART_ReceiveData(USART_TypeDef * USARTx , uint16_t* P_TXBuffer , enum Polling_Mechanism PollingEN )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	4613      	mov	r3, r2
 80008b4:	71fb      	strb	r3, [r7, #7]
	//wait until TXE flag is set in the SR
		if(PollingEN == enable)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <MCAL_UART_ReceiveData+0x22>
			while(!(USARTx->SR & 1<<5));
 80008bc:	bf00      	nop
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f9      	beq.n	80008be <MCAL_UART_ReceiveData+0x16>
				*((uint16_t*)P_TXBuffer) = (USARTx->DR & (uint8_t)0xFF);
			}
		}
		else
		{
			if(G_UART_config ->Parity == UART_Parity_none)
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MCAL_UART_ReceiveData+0x58>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	7a5b      	ldrb	r3, [r3, #9]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d107      	bne.n	80008e4 <MCAL_UART_ReceiveData+0x3c>
			{
				*((uint16_t*)P_TXBuffer) = (USARTx->DR & (uint8_t)0xFF);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	801a      	strh	r2, [r3, #0]
			else
			{
				*((uint16_t*)P_TXBuffer) = (USARTx->DR & (uint8_t)0x7F);
			}
		}
}
 80008e2:	e007      	b.n	80008f4 <MCAL_UART_ReceiveData+0x4c>
				*((uint16_t*)P_TXBuffer) = (USARTx->DR & (uint8_t)0x7F);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	801a      	strh	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000001c 	.word	0x2000001c

08000904 <MCAL_UART_GPIO_Sett_Pins>:
 * @param [in] 		-USARTx: where x can be (1,2,3 depending on device used)
 * @retval 			-none
 * Note				- none
 */
void MCAL_UART_GPIO_Sett_Pins(USART_TypeDef * USARTx )
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCFG;
	if(USARTx == USART1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <MCAL_UART_GPIO_Sett_Pins+0xb8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d118      	bne.n	8000946 <MCAL_UART_GPIO_Sett_Pins+0x42>
		//PA10		RX
		//PA11   	CTS
		//PA12		RTS

		//PA9   	TX
		PinCFG.GPIO_PinNumber = GPIO_PIN_9;
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800091a:	2306      	movs	r3, #6
 800091c:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4825      	ldr	r0, [pc, #148]	; (80009c0 <MCAL_UART_GPIO_Sett_Pins+0xbc>)
 800092a:	f7ff fe06 	bl	800053a <MCAL_GPIO_Init>

		//PA10		RX
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000934:	2308      	movs	r3, #8
 8000936:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MCAL_UART_GPIO_Sett_Pins+0xbc>)
 8000940:	f7ff fdfb 	bl	800053a <MCAL_GPIO_Init>
			PinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCFG);
		}
	}
}
 8000944:	e036      	b.n	80009b4 <MCAL_UART_GPIO_Sett_Pins+0xb0>
	else if(USARTx == USART2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <MCAL_UART_GPIO_Sett_Pins+0xc0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d116      	bne.n	800097c <MCAL_UART_GPIO_Sett_Pins+0x78>
		PinCFG.GPIO_PinNumber = GPIO_PIN_2;
 800094e:	2304      	movs	r3, #4
 8000950:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000952:	2306      	movs	r3, #6
 8000954:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4817      	ldr	r0, [pc, #92]	; (80009c0 <MCAL_UART_GPIO_Sett_Pins+0xbc>)
 8000962:	f7ff fdea 	bl	800053a <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_3;
 8000966:	2308      	movs	r3, #8
 8000968:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800096a:	2308      	movs	r3, #8
 800096c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MCAL_UART_GPIO_Sett_Pins+0xbc>)
 8000976:	f7ff fde0 	bl	800053a <MCAL_GPIO_Init>
}
 800097a:	e01b      	b.n	80009b4 <MCAL_UART_GPIO_Sett_Pins+0xb0>
	else if(USARTx == USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <MCAL_UART_GPIO_Sett_Pins+0xc0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d117      	bne.n	80009b4 <MCAL_UART_GPIO_Sett_Pins+0xb0>
		PinCFG.GPIO_PinNumber = GPIO_PIN_10;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800098a:	2306      	movs	r3, #6
 800098c:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 800098e:	2301      	movs	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MCAL_UART_GPIO_Sett_Pins+0xc4>)
 800099a:	f7ff fdce 	bl	800053a <MCAL_GPIO_Init>
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 800099e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a2:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009a4:	2308      	movs	r3, #8
 80009a6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCFG);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MCAL_UART_GPIO_Sett_Pins+0xc4>)
 80009b0:	f7ff fdc3 	bl	800053a <MCAL_GPIO_Init>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40013800 	.word	0x40013800
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40010c00 	.word	0x40010c00

080009cc <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <USART1_IRQHandler+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	4798      	blx	r3
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000001c 	.word	0x2000001c

080009e0 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <USART2_IRQHandler+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	4798      	blx	r3
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000001c 	.word	0x2000001c

080009f4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	G_UART_config->P_IRQ_CallBack();
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <USART3_IRQHandler+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	4798      	blx	r3
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000001c 	.word	0x2000001c

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	4e0c      	ldr	r6, [pc, #48]	; (8000a40 <__libc_init_array+0x38>)
 8000a0e:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a10:	1ba4      	subs	r4, r4, r6
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	42a5      	cmp	r5, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	f000 f81a 	bl	8000a50 <_init>
 8000a1c:	2500      	movs	r5, #0
 8000a1e:	4e0a      	ldr	r6, [pc, #40]	; (8000a48 <__libc_init_array+0x40>)
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <__libc_init_array+0x44>)
 8000a22:	1ba4      	subs	r4, r4, r6
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	42a5      	cmp	r5, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a30:	4798      	blx	r3
 8000a32:	3501      	adds	r5, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a3a:	4798      	blx	r3
 8000a3c:	3501      	adds	r5, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08000a78 	.word	0x08000a78
 8000a44:	08000a78 	.word	0x08000a78
 8000a48:	08000a78 	.word	0x08000a78
 8000a4c:	08000a7c 	.word	0x08000a7c

08000a50 <_init>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr

08000a5c <_fini>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	bf00      	nop
 8000a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a62:	bc08      	pop	{r3}
 8000a64:	469e      	mov	lr, r3
 8000a66:	4770      	bx	lr

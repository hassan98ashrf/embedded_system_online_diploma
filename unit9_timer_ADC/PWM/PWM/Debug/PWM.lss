
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f1  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001e5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_10>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  74:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MCAL_Timer_Init>:
void MCAL_PWM_DutyCycle(uint8_t duty_cycle)
{
	if(Global_Timer_Config.Timer_Mode == TIMER_MODE_FAST_PWM_NONINVERTING)
		OCR0 = duty_cycle;
	else if(Global_Timer_Config.Timer_Mode == TIMER_MODE_FAST_PWM_INVERTING)
		OCR0 = (uint8_t)(255 - duty_cycle);
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	ec 01       	movw	r28, r24
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	fe 01       	movw	r30, r28
  86:	a6 e6       	ldi	r26, 0x66	; 102
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 90       	ld	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	8a 95       	dec	r24
  90:	e1 f7       	brne	.-8      	; 0x8a <MCAL_Timer_Init+0xe>
  92:	93 b7       	in	r25, 0x33	; 51
  94:	88 81       	ld	r24, Y
  96:	89 2b       	or	r24, r25
  98:	83 bf       	out	0x33, r24	; 51
  9a:	88 81       	ld	r24, Y
  9c:	88 37       	cpi	r24, 0x78	; 120
  9e:	11 f0       	breq	.+4      	; 0xa4 <MCAL_Timer_Init+0x28>
  a0:	88 36       	cpi	r24, 0x68	; 104
  a2:	19 f4       	brne	.+6      	; 0xaa <MCAL_Timer_Init+0x2e>
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	93 b7       	in	r25, 0x33	; 51
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	89 2b       	or	r24, r25
  b0:	83 bf       	out	0x33, r24	; 51
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	86 50       	subi	r24, 0x06	; 6
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	18 f4       	brcc	.+6      	; 0xc0 <MCAL_Timer_Init+0x44>
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	87 bb       	out	0x17, r24	; 23
  c0:	99 b7       	in	r25, 0x39	; 57
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	89 2b       	or	r24, r25
  c6:	89 bf       	out	0x39, r24	; 57
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	88 23       	and	r24, r24
  cc:	21 f0       	breq	.+8      	; 0xd6 <MCAL_Timer_Init+0x5a>
  ce:	8f b7       	in	r24, 0x3f	; 63
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8f bf       	out	0x3f, r24	; 63
  d4:	03 c0       	rjmp	.+6      	; 0xdc <MCAL_Timer_Init+0x60>
  d6:	8f b7       	in	r24, 0x3f	; 63
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	8f bf       	out	0x3f, r24	; 63
  dc:	8b 81       	ldd	r24, Y+3	; 0x03
  de:	9c 81       	ldd	r25, Y+4	; 0x04
  e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <MCAL_SetTimer_compare_val>:
  ee:	8c bf       	out	0x3c, r24	; 60
  f0:	08 95       	ret

000000f2 <__vector_11>:
 *
*/

//OVERFLOW ISR
ISR(TIMER0_OVF_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	GP_CallBack();
 114:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	09 95       	icall
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_10>:

//COMPARE MATCH ISR
ISR(TIMER0_COMP_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	GP_CallBack();
 162:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16a:	09 95       	icall
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <Timer_CompareMatch_Interrupt_Handler>:
	if(timer_counter == 3921)
	{
		//Toggle Led every one second
		TOGGLE_BIT(PORTD, PIN_NUM);
		//Clear Counter
		timer_counter = 0;
 18e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer_counter>
 192:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <timer_counter+0x1>
 196:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <timer_counter+0x2>
 19a:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <timer_counter+0x3>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	a1 1d       	adc	r26, r1
 1a2:	b1 1d       	adc	r27, r1
 1a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <timer_counter>
 1a8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <timer_counter+0x1>
 1ac:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <timer_counter+0x2>
 1b0:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <timer_counter+0x3>
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	97 42       	sbci	r25, 0x27	; 39
 1b8:	a1 05       	cpc	r26, r1
 1ba:	b1 05       	cpc	r27, r1
 1bc:	61 f4       	brne	.+24     	; 0x1d6 <Timer_CompareMatch_Interrupt_Handler+0x48>
 1be:	92 b3       	in	r25, 0x12	; 18
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	89 27       	eor	r24, r25
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <timer_counter>
 1ca:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer_counter+0x1>
 1ce:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_counter+0x2>
 1d2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_counter+0x3>
 1d6:	08 95       	ret

000001d8 <main>:
	}
}


int main(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x6>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0x8>
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	//Configure PIND0 as Output
	SET_BIT(DDRD, PIN_NUM);
 1e6:	81 b3       	in	r24, 0x11	; 17
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	81 bb       	out	0x11, r24	; 17
	//set compare value
	MCAL_SetTimer_compare_val(100);
 1ec:	84 e6       	ldi	r24, 0x64	; 100
 1ee:	0e 94 77 00 	call	0xee	; 0xee <MCAL_SetTimer_compare_val>
	//set timer configuration
	TIMER_CONFIG_t timer_cfg;
	timer_cfg.Timer_Mode = TIMER_MODE_CTC;
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	89 83       	std	Y+1, r24	; 0x01
	timer_cfg.Clock_Source = CLOCK_SOURCE_INTERNAL_PRESCALER_DIVIDED_BY_8;
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	8a 83       	std	Y+2, r24	; 0x02
	timer_cfg.IRQ_Enable = IRQ_ENABLE_OCIE0;
 1fa:	8b 83       	std	Y+3, r24	; 0x03
	timer_cfg.P_CallBack = Timer_CompareMatch_Interrupt_Handler;
 1fc:	87 ec       	ldi	r24, 0xC7	; 199
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9d 83       	std	Y+5, r25	; 0x05
 202:	8c 83       	std	Y+4, r24	; 0x04
	MCAL_Timer_Init(&timer_cfg);
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 3e 00 	call	0x7c	; 0x7c <MCAL_Timer_Init>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x34>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
